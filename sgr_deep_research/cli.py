"""CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è SGR Deep Research –∞–≥–µ–Ω—Ç–æ–≤."""

import asyncio
import logging
import sys
from datetime import datetime
from pathlib import Path
from typing import Dict, Type

import click
from rich.console import Console
from rich.live import Live
from rich.markdown import Markdown
from rich.panel import Panel
from rich.prompt import Prompt
from rich.spinner import Spinner
from rich.text import Text

from sgr_deep_research.core.agents import (
    BaseAgent,
    SGRAutoToolCallingResearchAgent,
    SGRResearchAgent,
    SGRSOToolCallingResearchAgent,
    SGRToolCallingResearchAgent,
    ToolCallingResearchAgent,
)
from sgr_deep_research.settings import get_config

console = Console()

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã
AGENTS: Dict[str, Type[BaseAgent]] = {
    "sgr": SGRResearchAgent,
    "sgr-tools": SGRToolCallingResearchAgent,
    "sgr-auto-tools": SGRAutoToolCallingResearchAgent,
    "sgr-so-tools": SGRSOToolCallingResearchAgent,
    "tools": ToolCallingResearchAgent,
}


def setup_logging(debug: bool = False):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    level = logging.DEBUG if debug else logging.INFO
    logging.basicConfig(
        level=level,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        handlers=[logging.StreamHandler(sys.stderr)],
    )


def display_agents():
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤."""
    console.print("\n[bold cyan]–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã:[/bold cyan]")
    for key, agent_class in AGENTS.items():
        doc = agent_class.__doc__ or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
        console.print(f"  [green]{key:15}[/green] - {doc.strip().split('.')[0]}")
    console.print()


async def run_agent(agent_type: str, query: str, output_file: str = None, deep_level: int = 0):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≥–µ–Ω—Ç–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º."""
    if agent_type not in AGENTS:
        console.print(f"[red]–û—à–∏–±–∫–∞:[/red] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–≥–µ–Ω—Ç–∞ '{agent_type}'")
        display_agents()
        return

    agent_class = AGENTS[agent_type]
    
    try:
        console.print(f"\n[bold cyan]–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞:[/bold cyan] {agent_class.__name__}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª—É–±–æ–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞ - –ø—Ä–æ—Å—Ç–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if deep_level > 0:
            # –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            base_steps = 6
            base_searches = 4
            
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
            max_iterations = base_steps * (deep_level * 3 + 1)  # 6 -> 12/24/36/48
            max_searches = base_searches * (deep_level + 1)     # 4 -> 8/12/16/20
            
            # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            if hasattr(agent_class, '__init__'):
                import inspect
                sig = inspect.signature(agent_class.__init__)
                kwargs = {'task': query}
                
                if 'max_iterations' in sig.parameters:
                    kwargs['max_iterations'] = max_iterations
                if 'max_searches' in sig.parameters:
                    kwargs['max_searches'] = max_searches
                
                agent = agent_class(**kwargs)
            else:
                agent = agent_class(query, max_iterations=max_iterations)
            
            console.print(f"[bold yellow]üîç –ì–õ–£–ë–û–ö–ò–ô –†–ï–ñ–ò–ú –£–†–û–í–ù–Ø {deep_level}[/bold yellow]")
            console.print(f"[yellow]–ú–∞–∫—Å–∏–º—É–º —à–∞–≥–æ–≤: {max_iterations}[/yellow]")
            console.print(f"[yellow]–ú–∞–∫—Å–∏–º—É–º –ø–æ–∏—Å–∫–æ–≤: {max_searches}[/yellow]")
            console.print(f"[yellow]–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {deep_level * 10}-{deep_level * 30} –º–∏–Ω—É—Ç[/yellow]")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º deep_level –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –º–æ–¥–µ–ª–∏
            agent._deep_level = deep_level
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É GPT-5
            if hasattr(agent, '_get_model_parameters'):
                model_params = agent._get_model_parameters(deep_level)
                if 'max_completion_tokens' in model_params:
                    console.print(f"[dim]GPT-5 —Ä–µ–∂–∏–º: {model_params['max_completion_tokens']} —Ç–æ–∫–µ–Ω–æ–≤, reasoning_effort={model_params.get('reasoning_effort', 'medium')}[/dim]")
                else:
                    console.print(f"[dim]–ö–æ–Ω—Ç–µ–∫—Å—Ç: {model_params['max_tokens']} —Ç–æ–∫–µ–Ω–æ–≤[/dim]")
        else:
            agent = agent_class(query)
        
        console.print(f"[bold cyan]–ó–∞–ø—Ä–æ—Å:[/bold cyan] {query}")
        console.print(f"[bold cyan]–ú–æ–¥–µ–ª—å:[/bold cyan] {agent.model_name}")
        console.print()
        
        # –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —É—Ç–æ—á–Ω–µ–Ω–∏–π
        from sgr_deep_research.core.models import AgentStatesEnum
        
        # –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        agent_task = asyncio.create_task(agent.execute())
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
        while agent._context.state not in AgentStatesEnum.FINISH_STATES.value:
            if agent._context.state == AgentStatesEnum.WAITING_FOR_CLARIFICATION:
                # –ê–≥–µ–Ω—Ç –∂–¥–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏–π
                console.print("\n[bold yellow]ü§î –ê–≥–µ–Ω—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è:[/bold yellow]")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ clarification
                last_clarification = ""
                if agent.log:
                    for log_entry in reversed(agent.log):
                        if (log_entry.get("step_type") == "tool_execution" and 
                            log_entry.get("tool_name") == "clarificationtool"):
                            last_clarification = log_entry.get("agent_tool_execution_result", "")
                            break
                
                if last_clarification:
                    console.print(Panel(last_clarification, title="–í–æ–ø—Ä–æ—Å—ã", border_style="yellow"))
                
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_answer = Prompt.ask("\n[bold]–í–∞—à –æ—Ç–≤–µ—Ç[/bold]", default="")
                
                if user_answer.strip():
                    # –ü–µ—Ä–µ–¥–∞–µ–º —É—Ç–æ—á–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç—É
                    await agent.provide_clarification(user_answer)
                    console.print("[green]‚úÖ –£—Ç–æ—á–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞–Ω—ã –∞–≥–µ–Ω—Ç—É[/green]\n")
                else:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª, –∑–∞–≤–µ—Ä—à–∞–µ–º
                    console.print("[yellow]‚ö†Ô∏è –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –∞–≥–µ–Ω—Ç–∞[/yellow]")
                    break
            
            await asyncio.sleep(0.1)
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç–∞
        try:
            await agent_task
        except asyncio.CancelledError:
            pass
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∞–≥–µ–Ω—Ç–∞
        if agent._context.state == AgentStatesEnum.COMPLETED:
            # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
            final_answer = ""
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã –≤ –ø–∞–ø–∫–µ reports
            reports_dir = Path("reports")
            if reports_dir.exists():
                # –ù–∞–π—Ç–∏ —Å–∞–º—ã–π –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç
                report_files = list(reports_dir.glob("*.md"))
                if report_files:
                    latest_report = max(report_files, key=lambda x: x.stat().st_mtime)
                    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–µ–¥–∞–≤–Ω–æ (–≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –º–∏–Ω—É—Ç)
                    if (datetime.now().timestamp() - latest_report.stat().st_mtime) < 300:
                        try:
                            with open(latest_report, 'r', encoding='utf-8') as f:
                                final_answer = f.read()
                            console.print(f"[dim]–ù–∞–π–¥–µ–Ω –æ—Ç—á–µ—Ç: {latest_report.name}[/dim]")
                        except Exception as e:
                            console.print(f"[yellow]–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç—á–µ—Ç: {e}[/yellow]")
            
            # –ï—Å–ª–∏ –æ—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            if not final_answer:
                if hasattr(agent.streaming_generator, '_buffer'):
                    final_answer = agent.streaming_generator._buffer
                elif hasattr(agent, '_final_answer'):
                    final_answer = agent._final_answer
                elif agent._context.searches:
                    final_answer = agent._context.searches[-1].answer or "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ."
                else:
                    final_answer = "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            console.print("\n" + "="*80 + "\n")
            console.print(Panel(
                Markdown(final_answer),
                title="[bold green]–†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è[/bold green]",
                border_style="green"
            ))
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            sources = list(agent._context.sources.values())
            if sources:
                console.print(f"\n[bold cyan]–ò—Å—Ç–æ—á–Ω–∏–∫–∏ ({len(sources)}):[/bold cyan]")
                for source in sources:
                    console.print(f"  {source.number}. [link]{source.url}[/link]")
                    if source.title:
                        console.print(f"     {source.title}")
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            console.print(f"\n[bold yellow]üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:[/bold yellow]")
            stats = agent.metrics.format_stats()
            for key, value in stats.items():
                console.print(f"  [cyan]{key}:[/cyan] {value}")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
            if output_file:
                output_path = Path(output_file)
                output_path.parent.mkdir(parents=True, exist_ok=True)
                
                with open(output_path, "w", encoding="utf-8") as f:
                    f.write(f"# –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è\n\n")
                    f.write(f"**–ó–∞–ø—Ä–æ—Å:** {query}\n\n")
                    f.write(f"**–ê–≥–µ–Ω—Ç:** {agent_class.__name__}\n\n")
                    f.write(f"**–ú–æ–¥–µ–ª—å:** {agent.model_name}\n\n")
                    f.write("## –û—Ç–≤–µ—Ç\n\n")
                    f.write(final_answer)
                    
                    if sources:
                        f.write("\n\n## –ò—Å—Ç–æ—á–Ω–∏–∫–∏\n\n")
                        for source in sources:
                            f.write(f"{source.number}. [{source.title or '–ò—Å—Ç–æ—á–Ω–∏–∫'}]({source.url})\n")
                
                console.print(f"\n[green]–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤:[/green] {output_path}")
            
            return {"answer": final_answer, "sources": sources}
        else:
            console.print(f"[red]–ê–≥–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π. –°–æ—Å—Ç–æ—è–Ω–∏–µ:[/red] {agent._context.state}")
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            console.print(f"\n[bold yellow]üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:[/bold yellow]")
            stats = agent.metrics.format_stats()
            for key, value in stats.items():
                console.print(f"  [cyan]{key}:[/cyan] {value}")
            
            return None
        
    except Exception as e:
        console.print(f"\n[red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏:[/red] {e}")
        if logging.getLogger().isEnabledFor(logging.DEBUG):
            import traceback
            console.print(f"[red]Traceback:[/red]\n{traceback.format_exc()}")
        return None


async def interactive_mode():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã."""
    console.print("[bold cyan]üîç SGR Deep Research - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º[/bold cyan]")
    console.print("–í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏, 'quit' –¥–ª—è –≤—ã—Ö–æ–¥–∞\n")
    
    current_agent = "sgr-tools"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    while True:
        try:
            command = Prompt.ask(f"[{current_agent}]", default="").strip()
            
            if not command or command.lower() in ["quit", "exit", "q"]:
                console.print("[yellow]–î–æ —Å–≤–∏–¥–∞–Ω–∏—è![/yellow]")
                break
            
            if command.lower() == "help":
                console.print("\n[bold cyan]–ö–æ–º–∞–Ω–¥—ã:[/bold cyan]")
                console.print("  help              - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
                console.print("  agents            - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤")
                console.print("  agent <type>      - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –∞–≥–µ–Ω—Ç–∞")
                console.print("  deep <–∑–∞–ø—Ä–æ—Å>     - –ì–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ (20 —à–∞–≥–æ–≤)")
                console.print("  deep2 <–∑–∞–ø—Ä–æ—Å>    - –û—á–µ–Ω—å –≥–ª—É–±–æ–∫–æ–µ (40 —à–∞–≥–æ–≤, ~20-60 –º–∏–Ω)")
                console.print("  deep3 <–∑–∞–ø—Ä–æ—Å>    - –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –≥–ª—É–±–æ–∫–æ–µ (60 —à–∞–≥–æ–≤, ~30-90 –º–∏–Ω)")
                console.print("  quit/exit/q       - –í—ã—Ö–æ–¥")
                console.print("  <–∑–∞–ø—Ä–æ—Å>          - –í—ã–ø–æ–ª–Ω–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ")
                console.print()
                continue
            
            if command.lower() == "agents":
                display_agents()
                continue
            
            if command.lower().startswith("agent "):
                new_agent = command[6:].strip()
                if new_agent in AGENTS:
                    current_agent = new_agent
                    console.print(f"[green]–ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –∞–≥–µ–Ω—Ç–∞:[/green] {new_agent}")
                else:
                    console.print(f"[red]–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≥–µ–Ω—Ç:[/red] {new_agent}")
                    display_agents()
                continue
            
            # –í—ã–ø–æ–ª–Ω–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
            deep_level = 0
            if command.startswith("deep"):
                if command.startswith("deep "):
                    deep_level = 1
                    command = command[5:]  # –£–±—Ä–∞—Ç—å "deep " –∏–∑ –Ω–∞—á–∞–ª–∞
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω deep1, deep2, deep3 –∏ —Ç.–¥.
                    import re
                    match = re.match(r"deep(\d+)\s+(.+)", command)
                    if match:
                        deep_level = int(match.group(1))
                        command = match.group(2)
                    else:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç–æ deep1, deep2 –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞
                        match = re.match(r"deep(\d+)$", command.split()[0])
                        if match and len(command.split()) > 1:
                            deep_level = int(match.group(1))
                            command = " ".join(command.split()[1:])
                
                if deep_level > 0:
                    console.print(f"[yellow]üîç –ì–ª—É–±–æ–∫–∏–π —Ä–µ–∂–∏–º —É—Ä–æ–≤–Ω—è {deep_level} (–≤—Ä–µ–º—è: ~{deep_level * 10}-{deep_level * 30} –º–∏–Ω)[/yellow]")
            
            await run_agent(current_agent, command, deep_level=deep_level)
            console.print()
            
        except KeyboardInterrupt:
            console.print("\n[yellow]–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/yellow]")
            break
        except Exception as e:
            console.print(f"\n[red]–û—à–∏–±–∫–∞:[/red] {e}")


@click.group(invoke_without_command=True)
@click.option('--query', '-q', help='–ó–∞–ø—Ä–æ—Å –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è')
@click.option('--agent', '-a', 
              type=click.Choice(list(AGENTS.keys())), 
              default='sgr-tools',
              help='–¢–∏–ø –∞–≥–µ–Ω—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: sgr-tools)')
@click.option('--output', '-o', help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (Markdown)')
@click.option('--deep', type=int, default=0, 
              help='–£—Ä–æ–≤–µ–Ω—å –≥–ª—É–±–æ–∫–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è (1-5+: 1=20 —à–∞–≥–æ–≤, 2=40 —à–∞–≥–æ–≤, 3=60 —à–∞–≥–æ–≤...)')
@click.option('--debug', is_flag=True, help='–í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥')
@click.option('--interactive', '-i', is_flag=True, help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ')
@click.pass_context
def cli(ctx, query, agent, output, deep, debug, interactive):
    """SGR Deep Research CLI
    
    –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    
      # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
      uv run python -m sgr_deep_research.cli
    
      # –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—Ä–æ—Å
      uv run python -m sgr_deep_research.cli --query "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–≤–∞–Ω—Ç–æ–≤—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã?"
    
      # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
      uv run python -m sgr_deep_research.cli --agent sgr-tools --query "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ AI"
    
      # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ñ–∞–π–ª
      uv run python -m sgr_deep_research.cli --query "Python async/await" --output report.md
    """
    setup_logging(debug)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = get_config()
        console.print(f"[dim]–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {config.tavily.api_base_url}[/dim]")
    except Exception as e:
        console.print(f"[red]–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:[/red] {e}")
        sys.exit(1)
    
    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –≤—ã–∑–≤–∞–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É
    if ctx.invoked_subcommand is None:
        if interactive or not query:
            asyncio.run(interactive_mode())
        else:
            # –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            asyncio.run(run_agent(agent, query, output, deep))


@cli.command()
def agents():
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤."""
    display_agents()


@cli.command()
@click.argument('query')
@click.option('--level', '-l', type=int, default=1, help='–£—Ä–æ–≤–µ–Ω—å –≥–ª—É–±–∏–Ω—ã (1-5+)')
@click.option('--agent', '-a', 
              type=click.Choice(list(AGENTS.keys())), 
              default='sgr-tools',
              help='–¢–∏–ø –∞–≥–µ–Ω—Ç–∞')
@click.option('--output', '-o', help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
def deep(query, level, agent, output):
    """–ì–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º."""
    asyncio.run(run_agent(agent, query, output, level))


@cli.command()
@click.argument('query')
@click.option('--agent', '-a', 
              type=click.Choice(list(AGENTS.keys())), 
              default='sgr-tools',
              help='–¢–∏–ø –∞–≥–µ–Ω—Ç–∞')
@click.option('--output', '-o', help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
def deep1(query, agent, output):
    """–ì–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è 1 (20 —à–∞–≥–æ–≤, ~10-30 –º–∏–Ω)."""
    asyncio.run(run_agent(agent, query, output, 1))


@cli.command()
@click.argument('query')
@click.option('--agent', '-a', 
              type=click.Choice(list(AGENTS.keys())), 
              default='sgr-tools',
              help='–¢–∏–ø –∞–≥–µ–Ω—Ç–∞')
@click.option('--output', '-o', help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
def deep2(query, agent, output):
    """–û—á–µ–Ω—å –≥–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è 2 (40 —à–∞–≥–æ–≤, ~20-60 –º–∏–Ω)."""
    asyncio.run(run_agent(agent, query, output, 2))


@cli.command()
@click.argument('query')
@click.option('--agent', '-a', 
              type=click.Choice(list(AGENTS.keys())), 
              default='sgr-tools',
              help='–¢–∏–ø –∞–≥–µ–Ω—Ç–∞')
@click.option('--output', '-o', help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
def deep3(query, agent, output):
    """–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –≥–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è 3 (60 —à–∞–≥–æ–≤, ~30-90 –º–∏–Ω)."""
    asyncio.run(run_agent(agent, query, output, 3))


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ CLI."""
    cli()


if __name__ == "__main__":
    main()