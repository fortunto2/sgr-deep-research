"""CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è SGR Deep Research –∞–≥–µ–Ω—Ç–æ–≤."""

import argparse
import asyncio
import logging
import sys
from datetime import datetime
from pathlib import Path
from typing import Dict, Type

from rich.console import Console
from rich.live import Live
from rich.markdown import Markdown
from rich.panel import Panel
from rich.prompt import Prompt
from rich.spinner import Spinner
from rich.text import Text

from sgr_deep_research.core.agents import (
    BaseAgent,
    SGRAutoToolCallingResearchAgent,
    SGRResearchAgent,
    SGRSOToolCallingResearchAgent,
    SGRToolCallingResearchAgent,
    ToolCallingResearchAgent,
)
from sgr_deep_research.settings import get_config

console = Console()

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã
AGENTS: Dict[str, Type[BaseAgent]] = {
    "sgr": SGRResearchAgent,
    "sgr-tools": SGRToolCallingResearchAgent,
    "sgr-auto-tools": SGRAutoToolCallingResearchAgent,
    "sgr-so-tools": SGRSOToolCallingResearchAgent,
    "tools": ToolCallingResearchAgent,
}


def setup_logging(debug: bool = False):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    level = logging.DEBUG if debug else logging.INFO
    logging.basicConfig(
        level=level,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        handlers=[logging.StreamHandler(sys.stderr)],
    )


def display_agents():
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤."""
    console.print("\n[bold cyan]–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã:[/bold cyan]")
    for key, agent_class in AGENTS.items():
        doc = agent_class.__doc__ or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
        console.print(f"  [green]{key:15}[/green] - {doc.strip().split('.')[0]}")
    console.print()


async def run_agent(agent_type: str, query: str, output_file: str = None):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≥–µ–Ω—Ç–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º."""
    if agent_type not in AGENTS:
        console.print(f"[red]–û—à–∏–±–∫–∞:[/red] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–≥–µ–Ω—Ç–∞ '{agent_type}'")
        display_agents()
        return

    agent_class = AGENTS[agent_type]
    
    try:
        console.print(f"\n[bold cyan]–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞:[/bold cyan] {agent_class.__name__}")
        agent = agent_class(query)
        
        console.print(f"[bold cyan]–ó–∞–ø—Ä–æ—Å:[/bold cyan] {query}")
        console.print(f"[bold cyan]–ú–æ–¥–µ–ª—å:[/bold cyan] {agent.model_name}")
        console.print()
        
        # –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
        with Live(Spinner("dots", text="–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞..."), console=console, refresh_per_second=10):
            await agent.execute()
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
        from sgr_deep_research.core.models import AgentStatesEnum
        while agent._context.state not in AgentStatesEnum.FINISH_STATES.value:
            await asyncio.sleep(0.1)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∞–≥–µ–Ω—Ç–∞
        if agent._context.state == AgentStatesEnum.COMPLETED:
            # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
            final_answer = ""
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã –≤ –ø–∞–ø–∫–µ reports
            reports_dir = Path("reports")
            if reports_dir.exists():
                # –ù–∞–π—Ç–∏ —Å–∞–º—ã–π –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç
                report_files = list(reports_dir.glob("*.md"))
                if report_files:
                    latest_report = max(report_files, key=lambda x: x.stat().st_mtime)
                    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–µ–¥–∞–≤–Ω–æ (–≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –º–∏–Ω—É—Ç)
                    if (datetime.now().timestamp() - latest_report.stat().st_mtime) < 300:
                        try:
                            with open(latest_report, 'r', encoding='utf-8') as f:
                                final_answer = f.read()
                            console.print(f"[dim]–ù–∞–π–¥–µ–Ω –æ—Ç—á–µ—Ç: {latest_report.name}[/dim]")
                        except Exception as e:
                            console.print(f"[yellow]–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç—á–µ—Ç: {e}[/yellow]")
            
            # –ï—Å–ª–∏ –æ—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            if not final_answer:
                if hasattr(agent.streaming_generator, '_buffer'):
                    final_answer = agent.streaming_generator._buffer
                elif hasattr(agent, '_final_answer'):
                    final_answer = agent._final_answer
                elif agent._context.searches:
                    final_answer = agent._context.searches[-1].answer or "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ."
                else:
                    final_answer = "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            console.print("\n" + "="*80 + "\n")
            console.print(Panel(
                Markdown(final_answer),
                title="[bold green]–†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è[/bold green]",
                border_style="green"
            ))
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            sources = list(agent._context.sources.values())
            if sources:
                console.print(f"\n[bold cyan]–ò—Å—Ç–æ—á–Ω–∏–∫–∏ ({len(sources)}):[/bold cyan]")
                for source in sources:
                    console.print(f"  {source.number}. [link]{source.url}[/link]")
                    if source.title:
                        console.print(f"     {source.title}")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
            if output_file:
                output_path = Path(output_file)
                output_path.parent.mkdir(parents=True, exist_ok=True)
                
                with open(output_path, "w", encoding="utf-8") as f:
                    f.write(f"# –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è\n\n")
                    f.write(f"**–ó–∞–ø—Ä–æ—Å:** {query}\n\n")
                    f.write(f"**–ê–≥–µ–Ω—Ç:** {agent_class.__name__}\n\n")
                    f.write(f"**–ú–æ–¥–µ–ª—å:** {agent.model_name}\n\n")
                    f.write("## –û—Ç–≤–µ—Ç\n\n")
                    f.write(final_answer)
                    
                    if sources:
                        f.write("\n\n## –ò—Å—Ç–æ—á–Ω–∏–∫–∏\n\n")
                        for source in sources:
                            f.write(f"{source.number}. [{source.title or '–ò—Å—Ç–æ—á–Ω–∏–∫'}]({source.url})\n")
                
                console.print(f"\n[green]–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤:[/green] {output_path}")
            
            return {"answer": final_answer, "sources": sources}
        else:
            console.print(f"[red]–ê–≥–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π. –°–æ—Å—Ç–æ—è–Ω–∏–µ:[/red] {agent._context.state}")
            return None
        
    except Exception as e:
        console.print(f"\n[red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏:[/red] {e}")
        if logging.getLogger().isEnabledFor(logging.DEBUG):
            import traceback
            console.print(f"[red]Traceback:[/red]\n{traceback.format_exc()}")
        return None


async def interactive_mode():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã."""
    console.print("[bold cyan]üîç SGR Deep Research - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º[/bold cyan]")
    console.print("–í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏, 'quit' –¥–ª—è –≤—ã—Ö–æ–¥–∞\n")
    
    current_agent = "sgr-tools"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    while True:
        try:
            command = Prompt.ask(f"[{current_agent}]", default="").strip()
            
            if not command or command.lower() in ["quit", "exit", "q"]:
                console.print("[yellow]–î–æ —Å–≤–∏–¥–∞–Ω–∏—è![/yellow]")
                break
            
            if command.lower() == "help":
                console.print("\n[bold cyan]–ö–æ–º–∞–Ω–¥—ã:[/bold cyan]")
                console.print("  help              - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
                console.print("  agents            - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤")
                console.print("  agent <type>      - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –∞–≥–µ–Ω—Ç–∞")
                console.print("  quit/exit/q       - –í—ã—Ö–æ–¥")
                console.print("  <–∑–∞–ø—Ä–æ—Å>          - –í—ã–ø–æ–ª–Ω–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ")
                console.print()
                continue
            
            if command.lower() == "agents":
                display_agents()
                continue
            
            if command.lower().startswith("agent "):
                new_agent = command[6:].strip()
                if new_agent in AGENTS:
                    current_agent = new_agent
                    console.print(f"[green]–ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –∞–≥–µ–Ω—Ç–∞:[/green] {new_agent}")
                else:
                    console.print(f"[red]–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≥–µ–Ω—Ç:[/red] {new_agent}")
                    display_agents()
                continue
            
            # –í—ã–ø–æ–ª–Ω–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
            await run_agent(current_agent, command)
            console.print()
            
        except KeyboardInterrupt:
            console.print("\n[yellow]–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/yellow]")
            break
        except Exception as e:
            console.print(f"\n[red]–û—à–∏–±–∫–∞:[/red] {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI."""
    parser = argparse.ArgumentParser(
        description="SGR Deep Research CLI",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
  uv run python -m sgr_deep_research.cli

  # –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—Ä–æ—Å
  uv run python -m sgr_deep_research.cli --query "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–≤–∞–Ω—Ç–æ–≤—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã?"

  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
  uv run python -m sgr_deep_research.cli --agent sgr-tools --query "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ AI"

  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ñ–∞–π–ª
  uv run python -m sgr_deep_research.cli --query "Python async/await" --output report.md

  # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
  uv run python -m sgr_deep_research.cli --list-agents
        """
    )
    
    parser.add_argument(
        "--query", "-q",
        type=str,
        help="–ó–∞–ø—Ä–æ—Å –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"
    )
    
    parser.add_argument(
        "--agent", "-a",
        type=str,
        choices=list(AGENTS.keys()),
        default="sgr-tools",
        help="–¢–∏–ø –∞–≥–µ–Ω—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: sgr-tools)"
    )
    
    parser.add_argument(
        "--output", "-o",
        type=str,
        help="–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (Markdown)"
    )
    
    parser.add_argument(
        "--list-agents",
        action="store_true",
        help="–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"
    )
    
    parser.add_argument(
        "--debug",
        action="store_true",
        help="–í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥"
    )
    
    parser.add_argument(
        "--interactive", "-i",
        action="store_true",
        help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ"
    )
    
    args = parser.parse_args()
    
    setup_logging(args.debug)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = get_config()
        console.print(f"[dim]–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {config.tavily.api_base_url}[/dim]")
    except Exception as e:
        console.print(f"[red]–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:[/red] {e}")
        sys.exit(1)
    
    if args.list_agents:
        display_agents()
        return
    
    if args.interactive or not args.query:
        asyncio.run(interactive_mode())
        return
    
    # –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    asyncio.run(run_agent(args.agent, args.query, args.output))


if __name__ == "__main__":
    main()