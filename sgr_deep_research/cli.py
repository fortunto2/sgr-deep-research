"""–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è SGR Deep Research –∞–≥–µ–Ω—Ç–æ–≤."""

import asyncio
import logging
import sys
from pathlib import Path
from typing import Dict, Type, Optional, List, Any

import click
from rich.console import Console
from rich.live import Live
from rich.markdown import Markdown
from rich.panel import Panel
from rich.progress import Progress, TextColumn, BarColumn, TimeRemainingColumn
from rich.prompt import Prompt, Confirm
from rich.spinner import Spinner
from rich.text import Text

from sgr_deep_research.core.agents import (
    BaseAgent,
    BatchGeneratorAgent,
    SGRToolCallingResearchAgent,
    AGENTS,
    DEFAULT_AGENT,
)
from sgr_deep_research.settings import get_config
from sgr_deep_research.flows import batch_simple_flow

console = Console()


def setup_logging(debug: bool = False):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    level = logging.DEBUG if debug else logging.INFO
    logging.basicConfig(
        level=level,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        handlers=[logging.StreamHandler(sys.stderr)],
    )


def display_agents():
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤."""
    console.print("\n[bold cyan]–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã:[/bold cyan]")
    for key, agent_class in AGENTS.items():
        doc = agent_class.__doc__ or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
        console.print(f"  [green]{key:15}[/green] - {doc.strip().split('.')[0]}")


async def run_agent_direct(
    query: str,
    deep_level: int = 0,
    output_file: Optional[str] = None,
) -> Dict[str, Any]:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ Prefect."""
    
    try:
        console.print(f"[bold cyan]üîç –ó–∞–ø—É—Å–∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è (–±–µ–∑ Prefect)[/bold cyan]")
        console.print(f"[cyan]–ó–∞–ø—Ä–æ—Å:[/cyan] {query}")
        if deep_level > 0:
            console.print(f"[cyan]–ì–ª—É–±–∏–Ω–∞:[/cyan] {deep_level}")
        console.print()

        base_steps = 5
        base_searches = 3

        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        agent = SGRToolCallingResearchAgent(
            task=query,
            max_iterations=base_steps * (deep_level * 3 + 1),
            max_searches=base_searches * (deep_level + 1),
            use_streaming=False,
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º deep_level –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –º–æ–¥–µ–ª–∏
        if deep_level > 0:
            agent._deep_level = deep_level

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º spinner –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        with Live(Spinner("dots", text="[yellow]–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ...[/yellow]"), refresh_per_second=4):
            await agent.execute()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
        from sgr_deep_research.core.models import AgentStatesEnum
        
        if agent._context.state == AgentStatesEnum.COMPLETED:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            final_answer = ""

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—á–µ—Ç—ã –≤ –ø–∞–ø–∫–µ reports
            reports_dir = Path("reports")
            if reports_dir.exists():
                report_files = list(reports_dir.glob("*.md"))
                if report_files:
                    latest_report = max(report_files, key=lambda x: x.stat().st_mtime)
                    from datetime import datetime
                    if (datetime.now().timestamp() - latest_report.stat().st_mtime) < 300:
                        try:
                            with open(latest_report, "r", encoding="utf-8") as f:
                                final_answer = f.read()
                            console.print(f"[green]üìÑ –ù–∞–π–¥–µ–Ω –æ—Ç—á–µ—Ç:[/green] {latest_report.name}")
                        except Exception as e:
                            console.print(f"[yellow]‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç—á–µ—Ç:[/yellow] {e}")

            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            sources = list(agent._context.sources.values())
            stats = agent.metrics.format_stats()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if output_file:
                output_path = Path(output_file)
                output_path.parent.mkdir(parents=True, exist_ok=True)
                
                with open(output_path, "w", encoding="utf-8") as f:
                    f.write(f"# –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è\n\n")
                    f.write(f"**–ó–∞–ø—Ä–æ—Å:** {query}\n\n")
                    f.write(f"**–ú–æ–¥–µ–ª—å:** {agent.model_name}\n\n")
                    if deep_level > 0:
                        f.write(f"**–ì–ª—É–±–∏–Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:** {deep_level}\n\n")
                    f.write("## –û—Ç–≤–µ—Ç\n\n")
                    f.write(final_answer)

                    if sources:
                        f.write("\n\n## –ò—Å—Ç–æ—á–Ω–∏–∫–∏\n\n")
                        for source in sources:
                            f.write(f"{source.number}. [{source.title or '–ò—Å—Ç–æ—á–Ω–∏–∫'}]({source.url})\n")
                
                console.print(f"[green]üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤:[/green] {output_path}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ markdown –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if final_answer:
                console.print("\n[bold green]üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:[/bold green]")
                console.print(Markdown(final_answer))
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å —Å –∏—Ç–æ–≥–∞–º–∏
            stats_text = f"""[green]üìä –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ:[/green] {len(sources)}
[green]‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:[/green] {stats.get('–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', 'N/A')}
[green]üîç –ü–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:[/green] {stats.get('–ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã', 'N/A')}
[green]üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:[/green] {stats.get('–°—Ç–æ–∏–º–æ—Å—Ç—å (–æ–±—â–∞—è)', 'N/A')}
[green]üß† –®–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:[/green] {stats.get('–®–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', 'N/A')}"""

            results_panel = Panel(
                stats_text,
                title="[bold green]‚úÖ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ![/bold green]",
                title_align="left",
                border_style="green",
                padding=(1, 2)
            )
            console.print(results_panel)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –µ—Å–ª–∏ –∏—Ö –º–Ω–æ–≥–æ
            if len(sources) > 0:
                sources_text = "\n".join([
                    f"[cyan]{i+1}.[/cyan] [link={source.url}]{source.title or '–ò—Å—Ç–æ—á–Ω–∏–∫'}[/link]"
                    for i, source in enumerate(sources[:5])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                ])
                
                if len(sources) > 5:
                    sources_text += f"\n[dim]... –∏ –µ—â—ë {len(sources) - 5} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤[/dim]"
                
                sources_panel = Panel(
                    sources_text,
                    title=f"[bold blue]üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏ ({len(sources)})[/bold blue]",
                    title_align="left", 
                    border_style="blue",
                    padding=(1, 2)
                )
                console.print(sources_panel)
            
            return {
                "status": "COMPLETED",
                "answer": final_answer,
                "sources": [{"number": s.number, "url": s.url, "title": s.title} for s in sources],
                "stats": stats,
                "deep_level": deep_level,
            }
            
        else:
            console.print(f"[red]‚ùå –ê–≥–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º:[/red] {agent._context.state}")
            return {
                "status": "ERROR",
                "error": f"Agent finished with state: {agent._context.state}",
                "stats": agent.metrics.format_stats(),
            }
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞:[/red] {e}")
        import traceback
        console.print(f"[red]Traceback:[/red]\n{traceback.format_exc()}")
        return {
            "status": "ERROR",
            "error": str(e),
            "stats": {},
        }


async def run_batch_simple(
    topic: str,
    count: int = 5,
    agent_type: str = DEFAULT_AGENT,
    max_concurrent: int = 3,
    result_dir: str = "batch_results",
    deep_level: int = 0,
) -> None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ batch-–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É—è batch_simple_flow."""
    
    console.print(f"[bold cyan]üöÄ –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ batch –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ (—Å Prefect)[/bold cyan]")
    console.print(f"[cyan]–¢–µ–º–∞:[/cyan] {topic}")
    console.print(f"[cyan]–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤:[/cyan] {count}")
    console.print(f"[cyan]–ê–≥–µ–Ω—Ç:[/cyan] {agent_type}")
    console.print(f"[cyan]–ú–∞–∫—Å–∏–º—É–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á:[/cyan] {max_concurrent}")
    if deep_level > 0:
        console.print(f"[cyan]–†–µ–∂–∏–º –¥–∏–ø–∞:[/cyan] —É—Ä–æ–≤–µ–Ω—å {deep_level} (~{5 * (deep_level * 3 + 1)} —à–∞–≥–æ–≤)")
    
    try:
        console.print("[yellow]‚ö° –ó–∞–ø—É—Å–∫–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π Prefect flow...[/yellow]")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π Prefect flow
        result = await batch_simple_flow(
            topic=topic,
            count=count,
            agent_type=agent_type,
            max_concurrent=max_concurrent,
            result_dir=result_dir,
            deep_level=deep_level,
        )
        
        if result.get("status") == "COMPLETED":
            console.print(f"\n[bold green]üéâ Batch –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ![/bold green]")
            console.print(f"[green]‚úÖ –£—Å–ø–µ—à–Ω–æ:[/green] {result['completed']}/{result['total_queries']}")
            if result['failed'] > 0:
                console.print(f"[red]‚ùå –û—à–∏–±–æ–∫:[/red] {result['failed']}")
            if result['exceptions'] > 0:
                console.print(f"[red]üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–π:[/red] {result['exceptions']}")
            console.print(f"[green]üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤:[/green] {result['result_dir']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            queries = result.get('queries', [])
            if queries:
                console.print(f"\n[bold blue]üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã ({len(queries)}):[/bold blue]")
                for i, query in enumerate(queries[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    console.print(f"  [cyan]{i:2d}.[/cyan] {query.get('query', 'N/A')}")
                if len(queries) > 10:
                    console.print(f"  [dim]... –∏ –µ—â—ë {len(queries) - 10} –∑–∞–ø—Ä–æ—Å–æ–≤[/dim]")
        else:
            console.print(f"[red]‚ùå Batch –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {result.get('error', 'Unknown error')}[/red]")
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è batch:[/red] {e}")
        import traceback
        console.print(f"[red]Traceback:[/red]\n{traceback.format_exc()}")


async def interactive_mode():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã."""
    console.print("[bold cyan]üîç SGR Deep Research - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º[/bold cyan]")
    console.print("–í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏, 'quit' –¥–ª—è –≤—ã—Ö–æ–¥–∞\n")
    
    current_agent = DEFAULT_AGENT
    
    while True:
        try:
            command = Prompt.ask(f"[{current_agent}]", default="").strip()
            
            if not command or command.lower() in ["quit", "exit", "q"]:
                console.print("[yellow]–î–æ —Å–≤–∏–¥–∞–Ω–∏—è![/yellow]")
                break
            
            if command.lower() == "help":
                console.print("\n[bold cyan]–ö–æ–º–∞–Ω–¥—ã:[/bold cyan]")
                console.print("  help                    - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
                console.print("  agents                  - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤")
                console.print("  agent <type>            - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –∞–≥–µ–Ω—Ç–∞")
                console.print("  deep <—É—Ä–æ–≤–µ–Ω—å> <–∑–∞–ø—Ä–æ—Å> - –ì–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ (—É—Ä–æ–≤–Ω–∏ 1-5+)")
                console.print("  batch <—Ç–µ–º–∞>            - Batch –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ (Prefect)")
                console.print("  batch-deep <—É—Ä–æ–≤–µ–Ω—å> <—Ç–µ–º–∞> - Batch —Å –≥–ª—É–±–æ–∫–∏–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º")
                console.print("  quit/exit/q             - –í—ã–π—Ç–∏")
                console.print("  <–≤–∞—à –∑–∞–ø—Ä–æ—Å>            - –û–±—ã—á–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ\n")
                continue
            
            if command.lower() == "agents":
                display_agents()
                continue
            
            if command.lower().startswith("agent "):
                agent_name = command[6:].strip()
                if agent_name in AGENTS:
                    current_agent = agent_name
                    console.print(f"[green]‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –∞–≥–µ–Ω—Ç–∞:[/green] {agent_name}")
                else:
                    console.print(f"[red]‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≥–µ–Ω—Ç:[/red] {agent_name}")
                    console.print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã:")
                    display_agents()
                continue
            
            if command.lower().startswith("deep "):
                parts = command[5:].strip().split(maxsplit=1)
                if len(parts) == 2:
                    try:
                        level = int(parts[0])
                        query = parts[1]
                        await run_agent_direct(query, level)
                    except ValueError:
                        console.print("[red]‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≥–ª—É–±–∏–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.[/red]")
                else:
                    console.print("[red]‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: deep <—É—Ä–æ–≤–µ–Ω—å> <–∑–∞–ø—Ä–æ—Å>[/red]")
                continue
            
            if command.lower().startswith("batch "):
                topic = command[6:].strip()
                if topic:
                    await run_batch_simple(topic, count=5, agent_type=current_agent)
                else:
                    console.print("[red]‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: batch <—Ç–µ–º–∞>[/red]")
                continue
            
            if command.lower().startswith("batch-deep "):
                parts = command[11:].strip().split(maxsplit=1)
                if len(parts) == 2:
                    try:
                        level = int(parts[0])
                        topic = parts[1]
                        await run_batch_simple(topic, count=5, agent_type=current_agent, deep_level=level)
                    except ValueError:
                        console.print("[red]‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≥–ª—É–±–∏–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.[/red]")
                else:
                    console.print("[red]‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: batch-deep <—É—Ä–æ–≤–µ–Ω—å> <—Ç–µ–º–∞>[/red]")
                continue
            
            # –û–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            await run_agent_direct(command)
            
        except KeyboardInterrupt:
            console.print("\n[yellow]–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/yellow]")
            continue
        except Exception as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞:[/red] {e}")


@click.group(invoke_without_command=True)
@click.option('--query', '-q', help='–ó–∞–ø—Ä–æ—Å –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è')
@click.option('--agent', '-a', 
              type=click.Choice(list(AGENTS.keys())), 
              default=DEFAULT_AGENT,
              help='–¢–∏–ø –∞–≥–µ–Ω—Ç–∞')
@click.option('--output', '-o', help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
@click.option('--deep', '-d', type=int, default=0, help='–£—Ä–æ–≤–µ–Ω—å –≥–ª—É–±–∏–Ω—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è (0-5+)')
@click.option('--debug', is_flag=True, help='–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏')
@click.option('--interactive', '-i', is_flag=True, help='–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º')
@click.pass_context
def cli(ctx, query, agent, output, deep, debug, interactive):
    """SGR Deep Research CLI - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è.
    
    –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:
    1. –°–∏–Ω–≥–ª —Ä–µ–∂–∏–º (–±–µ–∑ Prefect) - –ø—Ä—è–º–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
    2. Batch —Ä–µ–∂–∏–º (—Å Prefect) - –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ Prefect flow
    3. Deep —Ä–µ–∂–∏–º—ã - –≥–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–∑–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏
    """
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging(debug)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    try:
        config = get_config()
    except Exception as e:
        console.print(f"[red]–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:[/red] {e}")
        sys.exit(1)
    
    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –≤—ã–∑–≤–∞–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É
    if ctx.invoked_subcommand is None:
        if interactive or not query:
            asyncio.run(interactive_mode())
        else:
            # –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ Prefect)
            asyncio.run(run_agent_direct(query, deep, output))


@cli.command()
def agents():
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤."""
    display_agents()


@cli.command()
@click.argument('query')
@click.option('--level', '-l', type=int, default=1, help='–£—Ä–æ–≤–µ–Ω—å –≥–ª—É–±–∏–Ω—ã (1-5+)')
@click.option('--agent', '-a', 
              type=click.Choice(list(AGENTS.keys())), 
              default='sgr-tools',
              help='–¢–∏–ø –∞–≥–µ–Ω—Ç–∞')
@click.option('--output', '-o', help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
def deep(query, level, agent, output):
    """–ì–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ (–±–µ–∑ Prefect).
    
    –£—Ä–æ–≤–Ω–∏ –≥–ª—É–±–∏–Ω—ã:
    1 - ~20 —à–∞–≥–æ–≤, 10-30 –º–∏–Ω
    2 - ~40 —à–∞–≥–æ–≤, 20-60 –º–∏–Ω  
    3 - ~60 —à–∞–≥–æ–≤, 30-90 –º–∏–Ω
    4+ - ~80+ —à–∞–≥–æ–≤, 40+ –º–∏–Ω
    """
    asyncio.run(run_agent_direct(query, level, output))


@cli.command()
@click.argument('topic')
@click.option('--count', '-c', type=int, default=5, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏')
@click.option('--agent', '-a', 
              type=click.Choice(list(AGENTS.keys())), 
              default='sgr-tools',
              help='–¢–∏–ø –∞–≥–µ–Ω—Ç–∞')
@click.option('--concurrent', '-j', type=int, default=3, help='–ú–∞–∫—Å–∏–º—É–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á')
@click.option('--output-dir', '-o', default='batch_results', help='–ü–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
@click.option('--deep', '-d', type=int, default=0, help='–£—Ä–æ–≤–µ–Ω—å –≥–ª—É–±–∏–Ω—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è (0-5+, 0=–æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º)')
def batch(topic, count, agent, concurrent, output_dir, deep):
    """–ë–∞—Ç—á –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ - –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ (—Å Prefect).
    
    –ü—Ä–∏–º–µ—Ä—ã:
        uv run python -m sgr_deep_research.cli batch "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ AI —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"
        uv run python -m sgr_deep_research.cli batch "–∏—Å—Ç–æ—Ä–∏—è –±–∞—à–∫–∏—Ä" --count 10 --concurrent 2
        uv run python -m sgr_deep_research.cli batch "AI research" --deep 2 --count 3
    """
    asyncio.run(run_batch_simple(topic, count, agent, concurrent, output_dir, deep))


# Job Management Commands

@cli.group()
def jobs():
    """Job management commands."""
    pass


@jobs.command('submit')
@click.argument('query')
@click.option('--agent', '-a', default='sgr-tools', help='Agent type (sgr, sgr-tools, etc.)')
@click.option('--deep', '-d', type=int, default=0, help='Deep research level (0-5+)')
@click.option('--priority', '-p', type=int, default=0, help='Job priority (-100 to 100)')
@click.option('--tags', '-t', help='Comma-separated tags')
def submit_job(query, agent, deep, priority, tags):
    """Submit a new research job."""
    asyncio.run(submit_job_cmd(query, agent, deep, priority, tags))


@jobs.command('status')
@click.argument('job_id')
def job_status(job_id):
    """Get job status."""
    asyncio.run(get_job_status_cmd(job_id))


@jobs.command('list')
@click.option('--status', '-s', help='Filter by status (pending, running, completed, failed, cancelled)')
@click.option('--limit', '-l', type=int, default=20, help='Maximum number of jobs to show')
def list_jobs(status, limit):
    """List jobs."""
    asyncio.run(list_jobs_cmd(status, limit))


@jobs.command('cancel')
@click.argument('job_id')
def cancel_job(job_id):
    """Cancel a job."""
    asyncio.run(cancel_job_cmd(job_id))


@jobs.command('stream')
@click.argument('job_id')
def stream_job(job_id):
    """Stream job progress updates."""
    asyncio.run(stream_job_cmd(job_id))


async def submit_job_cmd(query: str, agent: str, deep: int, priority: int, tags: str):
    """Submit a job command implementation."""
    import httpx
    from sgr_deep_research.settings import get_config

    config = get_config()

    # Prepare request data
    request_data = {
        "query": query,
        "agent_type": agent,
        "deep_level": deep,
        "priority": priority,
        "tags": tags.split(",") if tags else [],
        "metadata": {}
    }

    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                "http://localhost:8010/jobs",
                json=request_data,
                timeout=30.0
            )

            if response.status_code == 201:
                data = response.json()
                console.print(f"[green]‚úì[/green] Job submitted successfully!")
                console.print(f"  Job ID: [cyan]{data['job_id']}[/cyan]")
                console.print(f"  Status: [yellow]{data['status']}[/yellow]")
                console.print(f"  Created: [blue]{data['created_at']}[/blue]")
                if data.get('estimated_completion'):
                    console.print(f"  Estimated completion: [blue]{data['estimated_completion']}[/blue]")
            else:
                console.print(f"[red]‚úó[/red] Failed to submit job: {response.status_code}")
                console.print(response.text)

    except Exception as e:
        console.print(f"[red]‚úó[/red] Error submitting job: {e}")


async def get_job_status_cmd(job_id: str):
    """Get job status command implementation."""
    import httpx

    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(
                f"http://localhost:8010/jobs/{job_id}",
                timeout=30.0
            )

            if response.status_code == 200:
                data = response.json()
                console.print(f"\n[bold cyan]Job Status: {job_id}[/bold cyan]")
                console.print(f"  Status: [yellow]{data['status']}[/yellow]")
                console.print(f"  Progress: [green]{data['progress']:.1f}%[/green]")
                console.print(f"  Current step: {data['current_step']}")
                console.print(f"  Steps completed: {data['steps_completed']}/{data['total_steps']}")
                console.print(f"  Created: [blue]{data['created_at']}[/blue]")

                if data.get('started_at'):
                    console.print(f"  Started: [blue]{data['started_at']}[/blue]")

                if data.get('completed_at'):
                    console.print(f"  Completed: [blue]{data['completed_at']}[/blue]")

                if data.get('result'):
                    result = data['result']
                    console.print(f"\n[bold green]Results:[/bold green]")
                    console.print(f"  Sources found: {len(result.get('sources', []))}")
                    if result.get('metrics'):
                        metrics = result['metrics']
                        console.print(f"  Duration: {metrics.get('total_duration_seconds', 0):.1f}s")
                        console.print(f"  API calls: {metrics.get('api_calls_made', 0)}")
                        console.print(f"  Estimated cost: ${metrics.get('estimated_cost_usd', 0):.2f}")

                if data.get('error'):
                    error = data['error']
                    console.print(f"\n[bold red]Error:[/bold red]")
                    console.print(f"  Type: {error['error_type']}")
                    console.print(f"  Message: {error['error_message']}")
                    console.print(f"  Occurred: [blue]{error['occurred_at']}[/blue]")

            elif response.status_code == 404:
                console.print(f"[red]‚úó[/red] Job not found: {job_id}")
            else:
                console.print(f"[red]‚úó[/red] Error getting job status: {response.status_code}")
                console.print(response.text)

    except Exception as e:
        console.print(f"[red]‚úó[/red] Error getting job status: {e}")


async def list_jobs_cmd(status: str, limit: int):
    """List jobs command implementation."""
    import httpx

    try:
        params = {"limit": limit}
        if status:
            params["status"] = status

        async with httpx.AsyncClient() as client:
            response = await client.get(
                "http://localhost:8010/jobs",
                params=params,
                timeout=30.0
            )

            if response.status_code == 200:
                data = response.json()
                jobs = data.get('jobs', [])

                if not jobs:
                    console.print("[yellow]No jobs found[/yellow]")
                    return

                console.print(f"\n[bold cyan]Jobs (showing {len(jobs)} of {data.get('total', len(jobs))})[/bold cyan]")

                for job in jobs:
                    status_color = {
                        'pending': 'yellow',
                        'running': 'blue',
                        'completed': 'green',
                        'failed': 'red',
                        'cancelled': 'gray'
                    }.get(job['status'], 'white')

                    console.print(f"  [{status_color}]{job['job_id']}[/{status_color}] - {job['status']} ({job['progress']:.1f}%)")
                    console.print(f"    Query: {job.get('query', 'N/A')}")
                    console.print(f"    Created: [blue]{job['created_at']}[/blue]")

            else:
                console.print(f"[red]‚úó[/red] Error listing jobs: {response.status_code}")
                console.print(response.text)

    except Exception as e:
        console.print(f"[red]‚úó[/red] Error listing jobs: {e}")


async def cancel_job_cmd(job_id: str):
    """Cancel job command implementation."""
    import httpx

    try:
        async with httpx.AsyncClient() as client:
            response = await client.delete(
                f"http://localhost:8010/jobs/{job_id}",
                timeout=30.0
            )

            if response.status_code == 200:
                data = response.json()
                console.print(f"[green]‚úì[/green] Job cancelled successfully!")
                console.print(f"  Job ID: [cyan]{data['job_id']}[/cyan]")
                console.print(f"  Status: [yellow]{data['status']}[/yellow]")
                console.print(f"  Cancelled at: [blue]{data['cancelled_at']}[/blue]")
            elif response.status_code == 404:
                console.print(f"[red]‚úó[/red] Job not found: {job_id}")
            elif response.status_code == 409:
                console.print(f"[red]‚úó[/red] Job cannot be cancelled (already completed)")
            else:
                console.print(f"[red]‚úó[/red] Error cancelling job: {response.status_code}")
                console.print(response.text)

    except Exception as e:
        console.print(f"[red]‚úó[/red] Error cancelling job: {e}")


async def stream_job_cmd(job_id: str):
    """Stream job progress command implementation."""
    import httpx

    console.print(f"[cyan]Streaming updates for job {job_id}...[/cyan]")
    console.print("[dim]Press Ctrl+C to stop[/dim]\n")

    try:
        async with httpx.AsyncClient() as client:
            async with client.stream(
                "GET",
                f"http://localhost:8010/jobs/{job_id}/stream",
                timeout=300.0
            ) as response:

                if response.status_code != 200:
                    console.print(f"[red]‚úó[/red] Error starting stream: {response.status_code}")
                    return

                async for line in response.aiter_lines():
                    if line.startswith("data: "):
                        try:
                            import json
                            data = json.loads(line[6:])  # Remove "data: " prefix

                            if 'error' in data:
                                console.print(f"[red]Error: {data['error']}[/red]")
                                break

                            console.print(f"[{data.get('status', 'unknown')}] {data.get('progress', 0):.1f}% - {data.get('current_step', 'N/A')}")

                            if data.get('status') in ['completed', 'failed', 'cancelled']:
                                console.print(f"[green]Stream ended: Job {data['status']}[/green]")
                                break

                        except json.JSONDecodeError:
                            continue  # Skip invalid JSON lines

    except KeyboardInterrupt:
        console.print("\n[yellow]Stream stopped by user[/yellow]")
    except Exception as e:
        console.print(f"[red]‚úó[/red] Error streaming job updates: {e}")


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ CLI."""
    cli()


if __name__ == "__main__":
    main()