"""CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è SGR Deep Research –∞–≥–µ–Ω—Ç–æ–≤."""

import asyncio
import json
import logging
import re
import sys
from datetime import datetime
from pathlib import Path
from typing import Dict, Type, Optional, List, Any

import click
from rich.console import Console
from rich.live import Live
from rich.markdown import Markdown
from rich.panel import Panel
from rich.progress import Progress, TextColumn, BarColumn, TimeRemainingColumn
from rich.prompt import Prompt, Confirm
from rich.spinner import Spinner
from rich.text import Text

from sgr_deep_research.core.agents import (
    BaseAgent,
    BatchGeneratorAgent,
    SGRToolCallingResearchAgent,
    AGENTS,
    DEFAULT_AGENT,
)
from sgr_deep_research.settings import get_config
from sgr_deep_research.flows import research_flow, batch_create_flow, batch_run_flow

console = Console()


def setup_logging(debug: bool = False):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    level = logging.DEBUG if debug else logging.INFO
    logging.basicConfig(
        level=level,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        handlers=[logging.StreamHandler(sys.stderr)],
    )


def display_agents():
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤."""
    console.print("\n[bold cyan]–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã:[/bold cyan]")
    for key, agent_class in AGENTS.items():
        doc = agent_class.__doc__ or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
        console.print(f"  [green]{key:15}[/green] - {doc.strip().split('.')[0]}")
    console.print()


async def run_agent(
    agent_type: str,
    query: str,
    output_file: Optional[str] = None,
    deep_level: int = 0,
    system_prompt: Optional[str] = None,
    clarifications: bool = False,
    log_file: Optional[str] = None,
    result_dir: Optional[str] = None,
):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≥–µ–Ω—Ç–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º."""
    if agent_type not in AGENTS:
        console.print(f"[red]–û—à–∏–±–∫–∞:[/red] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–≥–µ–Ω—Ç–∞ '{agent_type}'")
        display_agents()
        return

    agent_class = AGENTS[agent_type]
    
    try:
        console.print(f"\n[bold cyan]–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞:[/bold cyan] {agent_class.__name__}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª—É–±–æ–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞ - –ø—Ä–æ—Å—Ç–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if deep_level > 0:
            # –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            base_steps = 6
            base_searches = 4
            
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
            max_iterations = base_steps * (deep_level * 3 + 1)  # 6 -> 12/24/36/48
            max_searches = base_searches * (deep_level + 1)     # 4 -> 8/12/16/20
            
            # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            if hasattr(agent_class, '__init__'):
                import inspect
                sig = inspect.signature(agent_class.__init__)
                kwargs = {'task': query}
                
                if 'max_iterations' in sig.parameters:
                    kwargs['max_iterations'] = max_iterations
                if 'max_searches' in sig.parameters:
                    kwargs['max_searches'] = max_searches
                if 'use_streaming' in sig.parameters:
                    kwargs['use_streaming'] = False  # CLI –∏—Å–ø–æ–ª—å–∑—É–µ—Ç non-streaming –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
                
                agent = agent_class(**kwargs)
            else:
                agent = agent_class(query, max_iterations=max_iterations)
            
            console.print(f"[bold yellow]üîç –ì–õ–£–ë–û–ö–ò–ô –†–ï–ñ–ò–ú –£–†–û–í–ù–Ø {deep_level}[/bold yellow]")
            console.print(f"[yellow]–ú–∞–∫—Å–∏–º—É–º —à–∞–≥–æ–≤: {max_iterations}[/yellow]")
            console.print(f"[yellow]–ú–∞–∫—Å–∏–º—É–º –ø–æ–∏—Å–∫–æ–≤: {max_searches}[/yellow]")
            console.print(f"[yellow]–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {deep_level * 10}-{deep_level * 30} –º–∏–Ω—É—Ç[/yellow]")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º deep_level –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –º–æ–¥–µ–ª–∏
            agent._deep_level = deep_level
            # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            if system_prompt:
                agent._system_prompt_key_or_file = system_prompt
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É GPT-5
            if hasattr(agent, '_get_model_parameters'):
                model_params = agent._get_model_parameters(deep_level)
                if 'max_completion_tokens' in model_params:
                    console.print(f"[dim]GPT-5 —Ä–µ–∂–∏–º: {model_params['max_completion_tokens']} —Ç–æ–∫–µ–Ω–æ–≤, reasoning_effort={model_params.get('reasoning_effort', 'medium')}[/dim]")
                else:
                    console.print(f"[dim]–ö–æ–Ω—Ç–µ–∫—Å—Ç: {model_params['max_tokens']} —Ç–æ–∫–µ–Ω–æ–≤[/dim]")
        else:
            # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - —Ç–∞–∫–∂–µ –æ—Ç–∫–ª—é—á–∞–µ–º streaming –¥–ª—è CLI
            if hasattr(agent_class, '__init__'):
                import inspect
                sig = inspect.signature(agent_class.__init__)
                kwargs = {'task': query}
                
                if 'use_streaming' in sig.parameters:
                    kwargs['use_streaming'] = False  # CLI –∏—Å–ø–æ–ª—å–∑—É–µ—Ç non-streaming –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
                
                agent = agent_class(**kwargs)
            else:
                agent = agent_class(query)
            
            if system_prompt:
                agent._system_prompt_key_or_file = system_prompt
        
        console.print(f"[bold cyan]–ó–∞–ø—Ä–æ—Å:[/bold cyan] {query}")
        console.print(f"[bold cyan]–ú–æ–¥–µ–ª—å:[/bold cyan] {agent.model_name}")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ (–ø—Ä–µ—Å–µ—Ç –∏–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞)
        try:
            from sgr_deep_research.core.prompts import PromptLoader
            # –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º —Ä–µ–∑–æ–ª–≤–µ—Ä (–±–µ–∑ –≤—ã–≤–æ–¥–∞ –ø—É—Ç–∏)
            _ = PromptLoader.get_system_prompt(
                user_request=query,
                sources=[],
                deep_level=getattr(agent, "_deep_level", 0),
                system_prompt_key_or_file=getattr(agent, "_system_prompt_key_or_file", None),
            )
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            cfg = get_config()
            preset_map = getattr(cfg.prompts, 'available_prompts', {}) or {}
            if system_prompt:
                display_name = system_prompt if system_prompt in preset_map else Path(system_prompt).name
            else:
                display_name = 'deep' if getattr(agent, '_deep_level', 0) > 0 else 'default'
            console.print(f"[dim]–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:[/dim] {display_name}")
        except Exception:
            pass
        console.print()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        file_logger = None
        if log_file:
            import logging
            import os
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(os.path.dirname(log_file), exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä
            file_logger = logging.getLogger(f"agent_{id(agent)}")
            file_logger.setLevel(logging.INFO)
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
            for handler in file_logger.handlers[:]:
                file_logger.removeHandler(handler)
            
            file_handler = logging.FileHandler(log_file, mode='w', encoding='utf-8')
            file_handler.setLevel(logging.INFO)
            formatter = logging.Formatter('%(asctime)s - %(message)s', datefmt='%H:%M:%S')
            file_handler.setFormatter(formatter)
            file_logger.addHandler(file_handler)
            file_logger.propagate = False
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            file_logger.info(f"üöÄ –ê–≥–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω: {agent_class.__name__}")
            file_logger.info(f"üìù –ó–∞–ø—Ä–æ—Å: {query}")
            file_logger.info(f"üß† –ú–æ–¥–µ–ª—å: {agent.model_name}")
            if deep_level > 0:
                file_logger.info(f"üîç –ì–õ–£–ë–û–ö–ò–ô –†–ï–ñ–ò–ú –£–†–û–í–ù–Ø {deep_level}")
                file_logger.info(f"üìä –ú–∞–∫—Å–∏–º—É–º —à–∞–≥–æ–≤: {getattr(agent, 'max_iterations', 'N/A')}")
                file_logger.info(f"üîç –ú–∞–∫—Å–∏–º—É–º –ø–æ–∏—Å–∫–æ–≤: {getattr(agent, 'max_searches', 'N/A')}")
        
        # –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —É—Ç–æ—á–Ω–µ–Ω–∏–π
        from sgr_deep_research.core.models import AgentStatesEnum
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è batch-—Ä–µ–∂–∏–º–∞ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω result_dir
        original_reports_dir = None
        if result_dir:
            from sgr_deep_research.settings import get_config
            config = get_config()
            original_reports_dir = config.execution.reports_dir
            config.execution.reports_dir = result_dir
        
        # –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        agent_task = asyncio.create_task(agent.execute())
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
        last_logged_step = 0
        last_logged_state = None
        
        while agent._context.state not in AgentStatesEnum.FINISH_STATES.value:
            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∞–≥–µ–Ω—Ç–∞
            if file_logger:
                current_step = getattr(agent._context, 'step', 0)
                current_state = agent._context.state
                
                # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —à–∞–≥–∏
                if current_step > last_logged_step:
                    file_logger.info(f"üìà –®–∞–≥ {current_step} –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...")
                    last_logged_step = current_step
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
                if current_state != last_logged_state:
                    if current_state == AgentStatesEnum.RESEARCHING:
                        file_logger.info("‚ö° –ê–≥–µ–Ω—Ç –∏—Å—Å–ª–µ–¥—É–µ—Ç...")
                    elif current_state == AgentStatesEnum.WAITING_FOR_CLARIFICATION:
                        file_logger.info("‚ùì –û–∂–∏–¥–∞–Ω–∏–µ —É—Ç–æ—á–Ω–µ–Ω–∏–π...")
                    elif current_state == AgentStatesEnum.COMPLETED:
                        file_logger.info("‚úÖ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                    elif current_state == AgentStatesEnum.ERROR:
                        file_logger.info("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
                    elif current_state == AgentStatesEnum.FAILED:
                        file_logger.info("üí• –ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞")
                    else:
                        file_logger.info(f"üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
                    last_logged_state = current_state
                
                # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∏
                current_searches = getattr(agent._context, 'searches_used', 0)
                if hasattr(agent._context, '_last_logged_searches'):
                    last_searches = agent._context._last_logged_searches
                else:
                    last_searches = 0
                    agent._context._last_logged_searches = 0
                
                if current_searches > last_searches:
                    file_logger.info(f"üîç –í—ã–ø–æ–ª–Ω–µ–Ω –ø–æ–∏—Å–∫ {current_searches}/{getattr(agent, 'max_searches', 'N/A')}")
                    agent._context._last_logged_searches = current_searches
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ streaming generator –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                if hasattr(agent, 'streaming_generator') and hasattr(agent.streaming_generator, '_buffer'):
                    current_buffer_len = len(agent.streaming_generator._buffer)
                    if not hasattr(agent._context, '_last_logged_buffer_len'):
                        agent._context._last_logged_buffer_len = 0
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±—É—Ñ–µ—Ä–µ (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ)
                    if current_buffer_len > agent._context._last_logged_buffer_len + 500:  # –∫–∞–∂–¥—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
                        new_content = agent.streaming_generator._buffer[agent._context._last_logged_buffer_len:agent._context._last_logged_buffer_len + 100]
                        if new_content.strip():
                            file_logger.info(f"üí≠ –ê–≥–µ–Ω—Ç —Ä–∞–∑–º—ã—à–ª—è–µ—Ç: {new_content.strip()[:80]}...")
                        agent._context._last_logged_buffer_len = current_buffer_len
            
            if agent._context.state == AgentStatesEnum.WAITING_FOR_CLARIFICATION:
                if not clarifications:
                    # –í —Ä–µ–∂–∏–º–µ –±–µ–∑ —É—Ç–æ—á–Ω–µ–Ω–∏–π - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø—É—Å—Ç—ã–º –æ—Ç–≤–µ—Ç–æ–º
                    console.print("[yellow]‚ö†Ô∏è –†–µ–∂–∏–º –±–µ–∑ —É—Ç–æ—á–Ω–µ–Ω–∏–π - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω–æ[/yellow]")
                    if file_logger:
                        file_logger.info("‚ö†Ô∏è –†–µ–∂–∏–º –±–µ–∑ —É—Ç–æ—á–Ω–µ–Ω–∏–π - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω–æ")
                    await agent.provide_clarification("–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Ç–æ—á–Ω–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É—è –¥–æ—Å—Ç—É–ø–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
                else:
                    # –ê–≥–µ–Ω—Ç –∂–¥–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏–π
                    console.print("\n[bold yellow]ü§î –ê–≥–µ–Ω—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è:[/bold yellow]")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ clarification
                    last_clarification = ""
                    if agent.log:
                        for log_entry in reversed(agent.log):
                            if (log_entry.get("step_type") == "tool_execution" and 
                                log_entry.get("tool_name") == "clarificationtool"):
                                last_clarification = log_entry.get("agent_tool_execution_result", "")
                                break
                    
                    if last_clarification:
                        console.print(Panel(last_clarification, title="–í–æ–ø—Ä–æ—Å—ã", border_style="yellow"))
                    
                    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_answer = Prompt.ask("\n[bold]–í–∞—à –æ—Ç–≤–µ—Ç[/bold]", default="")
                    
                    if user_answer.strip():
                        # –ü–µ—Ä–µ–¥–∞–µ–º —É—Ç–æ—á–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç—É
                        await agent.provide_clarification(user_answer)
                        console.print("[green]‚úÖ –£—Ç–æ—á–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞–Ω—ã –∞–≥–µ–Ω—Ç—É[/green]\n")
                    else:
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª, –∑–∞–≤–µ—Ä—à–∞–µ–º
                        console.print("[yellow]‚ö†Ô∏è –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –∞–≥–µ–Ω—Ç–∞[/yellow]")
                        break
            
            await asyncio.sleep(0.1)
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç–∞
        try:
            await agent_task
        except asyncio.CancelledError:
            pass
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞
        if file_logger:
            if agent._context.state == AgentStatesEnum.COMPLETED:
                file_logger.info("‚úÖ –ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats = agent.metrics.format_stats()
                for key, value in stats.items():
                    file_logger.info(f"üìä {key}: {value}")
            else:
                file_logger.info(f"‚ùå –ê–≥–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º: {agent._context.state}")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∞–≥–µ–Ω—Ç–∞
        if agent._context.state == AgentStatesEnum.COMPLETED:
            # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
            final_answer = ""
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã –≤ –ø–∞–ø–∫–µ reports
            reports_dir = Path("reports")
            if reports_dir.exists():
                # –ù–∞–π—Ç–∏ —Å–∞–º—ã–π –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç
                report_files = list(reports_dir.glob("*.md"))
                if report_files:
                    latest_report = max(report_files, key=lambda x: x.stat().st_mtime)
                    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–µ–¥–∞–≤–Ω–æ (–≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –º–∏–Ω—É—Ç)
                    if (datetime.now().timestamp() - latest_report.stat().st_mtime) < 300:
                        try:
                            with open(latest_report, 'r', encoding='utf-8') as f:
                                final_answer = f.read()
                            console.print(f"[dim]–ù–∞–π–¥–µ–Ω –æ—Ç—á–µ—Ç: {latest_report.name}[/dim]")
                        except Exception as e:
                            console.print(f"[yellow]–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç—á–µ—Ç: {e}[/yellow]")
            
            # –ï—Å–ª–∏ –æ—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            if not final_answer:
                if hasattr(agent.streaming_generator, '_buffer'):
                    final_answer = agent.streaming_generator._buffer
                elif hasattr(agent, '_final_answer'):
                    final_answer = agent._final_answer
                elif agent._context.searches:
                    final_answer = agent._context.searches[-1].answer or "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ."
                else:
                    final_answer = "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            console.print("\n" + "="*80 + "\n")
            console.print(Panel(
                Markdown(final_answer),
                title="[bold green]–†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è[/bold green]",
                border_style="green"
            ))
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            sources = list(agent._context.sources.values())
            if sources:
                console.print(f"\n[bold cyan]–ò—Å—Ç–æ—á–Ω–∏–∫–∏ ({len(sources)}):[/bold cyan]")
                for source in sources:
                    console.print(f"  {source.number}. [link]{source.url}[/link]")
                    if source.title:
                        console.print(f"     {source.title}")
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            console.print(f"\n[bold yellow]üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:[/bold yellow]")
            stats = agent.metrics.format_stats()
            # –£–∫–∞–∂–µ–º –∫–∞–∫–æ–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
            try:
                from sgr_deep_research.core.prompts import PromptLoader
                prompt_path = PromptLoader.get_last_resolved_prompt_path()
                if prompt_path:
                    console.print(f"  [cyan]–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Ñ–∞–π–ª:[/cyan] {prompt_path}")
            except Exception:
                pass
            for key, value in stats.items():
                console.print(f"  [cyan]{key}:[/cyan] {value}")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
            if output_file:
                output_path = Path(output_file)
                output_path.parent.mkdir(parents=True, exist_ok=True)
                
                with open(output_path, "w", encoding="utf-8") as f:
                    f.write(f"# –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è\n\n")
                    f.write(f"**–ó–∞–ø—Ä–æ—Å:** {query}\n\n")
                    f.write(f"**–ê–≥–µ–Ω—Ç:** {agent_class.__name__}\n\n")
                    f.write(f"**–ú–æ–¥–µ–ª—å:** {agent.model_name}\n\n")
                    f.write("## –û—Ç–≤–µ—Ç\n\n")
                    f.write(final_answer)
                    
                    if sources:
                        f.write("\n\n## –ò—Å—Ç–æ—á–Ω–∏–∫–∏\n\n")
                        for source in sources:
                            f.write(f"{source.number}. [{source.title or '–ò—Å—Ç–æ—á–Ω–∏–∫'}]({source.url})\n")
                
                console.print(f"\n[green]–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤:[/green] {output_path}")
            
            return {"answer": final_answer, "sources": sources}
        else:
            console.print(f"[red]–ê–≥–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π. –°–æ—Å—Ç–æ—è–Ω–∏–µ:[/red] {agent._context.state}")
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            console.print(f"\n[bold yellow]üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:[/bold yellow]")
            stats = agent.metrics.format_stats()
            try:
                from sgr_deep_research.core.prompts import PromptLoader
                prompt_path = PromptLoader.get_last_resolved_prompt_path()
                if prompt_path:
                    console.print(f"  [cyan]–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Ñ–∞–π–ª:[/cyan] {prompt_path}")
            except Exception:
                pass
            for key, value in stats.items():
                console.print(f"  [cyan]{key}:[/cyan] {value}")
            
            return None
        
    except Exception as e:
        if file_logger:
            file_logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback
            file_logger.error(f"üìú Traceback: {traceback.format_exc()}")
        
        console.print(f"\n[red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏:[/red] {e}")
        if logging.getLogger().isEnabledFor(logging.DEBUG):
            import traceback
            console.print(f"[red]Traceback:[/red]\n{traceback.format_exc()}")
        return None
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if original_reports_dir is not None:
            from sgr_deep_research.settings import get_config
            config = get_config()
            config.execution.reports_dir = original_reports_dir


async def create_batch_plan(
    topic: str,
    batch_name: str,
    count: int,
    languages: List[str] = None,
) -> Path:
    """–°–æ–∑–¥–∞–µ—Ç –ø–ª–∞–Ω batch-–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—è Prefect flow."""
    
    console.print(f"[bold cyan]üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –¥–ª—è batch '{batch_name}'[/bold cyan]")
    console.print(f"[cyan]–¢–µ–º–∞:[/cyan] {topic}")
    console.print(f"[cyan]–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤:[/cyan] {count}")
    
    try:
        console.print("[yellow]‚ö° –ó–∞–ø—É—Å–∫–∞–µ–º Prefect flow –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞...[/yellow]")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Prefect flow –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è batch –ø–ª–∞–Ω–∞
        batch_dir = await batch_create_flow(
            topic=topic,
            batch_name=batch_name,
            count=count,
            languages=languages or ["ru", "en"],
        )
        
        console.print(f"[green]‚úÖ –ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ Prefect:[/green] {batch_dir}")
        return batch_dir
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞:[/red] {e}")
        return None


async def run_agent_with_prefect(
    agent_type: str,
    query: str,
    deep_level: int = 0,
    output_file: Optional[str] = None,
) -> Optional[Dict[str, Any]]:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Prefect flow."""
    
    try:
        console.print(f"\n[bold cyan]üîÑ –ó–∞–ø—É—Å–∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Prefect:[/bold cyan] {query}")
        console.print(f"[cyan]–ê–≥–µ–Ω—Ç:[/cyan] {agent_type}")
        if deep_level > 0:
            console.print(f"[yellow]üîç –ì–ª—É–±–æ–∫–∏–π —Ä–µ–∂–∏–º —É—Ä–æ–≤–Ω—è {deep_level}[/yellow]")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Prefect flow –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        result = await research_flow(
            agent_type=agent_type,
            query=query,
            deep_level=deep_level,
            output_file=output_file,
        )
        
        if result.get("status") == "COMPLETED":
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            console.print("\n" + "="*80 + "\n")
            console.print(Panel(
                Markdown(result.get("answer", "")),
                title="[bold green]–†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è (Prefect)[/bold green]",
                border_style="green"
            ))
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            sources = result.get("sources", [])
            if sources:
                console.print(f"\n[bold cyan]–ò—Å—Ç–æ—á–Ω–∏–∫–∏ ({len(sources)}):[/bold cyan]")
                for source in sources:
                    console.print(f"  {source['number']}. [link]{source['url']}[/link]")
                    if source['title']:
                        console.print(f"     {source['title']}")
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            console.print(f"\n[bold yellow]üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:[/bold yellow]")
            stats = result.get("stats", {})
            console.print(f"  [cyan]–ê–≥–µ–Ω—Ç:[/cyan] {result.get('agent_type', 'Unknown')}")
            console.print(f"  [cyan]–ú–æ–¥–µ–ª—å:[/cyan] {result.get('model', 'Unknown')}")
            if deep_level > 0:
                console.print(f"  [cyan]–ì–ª—É–±–∏–Ω–∞:[/cyan] {deep_level}")
            for key, value in stats.items():
                console.print(f"  [cyan]{key}:[/cyan] {value}")
            
            if output_file:
                console.print(f"\n[green]–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤:[/green] {output_file}")
            
            return result
        else:
            console.print(f"[red]–ê–≥–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:[/red] {result.get('error', 'Unknown error')}")
            return None
    
    except Exception as e:
        console.print(f"\n[red]–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ Prefect:[/red] {e}")
        import traceback
        console.print(f"[red]Traceback:[/red]\n{traceback.format_exc()}")
        return None


async def execute_single_query(
    line_num: int,
    query: str,
    batch_dir: Path,
    agent_type: str,
    suggested_depth: int = 0,
    semaphore: asyncio.Semaphore = None,
    clarifications: bool = False,
) -> tuple[int, bool]:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –∏–∑ batch –ø–ª–∞–Ω–∞."""
    if semaphore:
        async with semaphore:
            return await _execute_query_impl(line_num, query, batch_dir, agent_type, suggested_depth, not clarifications)
    else:
        return await _execute_query_impl(line_num, query, batch_dir, agent_type, suggested_depth, not clarifications)


async def _execute_query_impl(
    line_num: int,
    query: str, 
    batch_dir: Path,
    agent_type: str,
    suggested_depth: int = 0,
    clarifications: bool = False,
) -> tuple[int, bool]:
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞."""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result_dir = batch_dir / f"{line_num:02d}_result"
        result_dir.mkdir(exist_ok=True)
        
        output_file = result_dir / "report.md"
        log_file = result_dir / "agent.log"
        
        console.print(f"[cyan]üîÑ –°—Ç—Ä–æ–∫–∞ {line_num}:[/cyan] –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        result = await run_agent(
            agent_type=agent_type,
            query=query,
            output_file=str(output_file),
            deep_level=suggested_depth,
            clarifications=clarifications,
            log_file=str(log_file),
            result_dir=str(result_dir),  # –ü–µ—Ä–µ–¥–∞–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤
        )
        
        if result:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            meta_file = result_dir / "execution.json"
            with open(meta_file, "w", encoding="utf-8") as f:
                json.dump({
                    "line_number": line_num,
                    "query": query,
                    "agent_type": agent_type,
                    "suggested_depth": suggested_depth,
                    "completed_at": datetime.now().isoformat(),
                    "status": "COMPLETED",
                    "output_file": str(output_file),
                }, f, ensure_ascii=False, indent=2)
            
            console.print(f"[green]‚úÖ –°—Ç—Ä–æ–∫–∞ {line_num} –∑–∞–≤–µ—Ä—à–µ–Ω–∞[/green]")
            return line_num, True
        else:
            console.print(f"[red]‚ùå –°—Ç—Ä–æ–∫–∞ {line_num} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π[/red]")
            return line_num, False
            
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {line_num}:[/red] {e}")
        return line_num, False


async def run_batch_parallel(
    batch_name: str,
    agent_type: str = DEFAULT_AGENT,
    max_concurrent: int = 3,
    force_restart: bool = False,
    clarifications: bool = False,
) -> None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç batch-–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—è Prefect flow."""
    
    console.print(f"[bold cyan]üöÄ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ batch '{batch_name}' —á–µ—Ä–µ–∑ Prefect[/bold cyan]")
    console.print(f"[cyan]–ê–≥–µ–Ω—Ç:[/cyan] {agent_type}")
    console.print(f"[cyan]–ú–∞–∫—Å–∏–º—É–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á:[/cyan] {max_concurrent}")
    
    try:
        console.print("[yellow]‚ö° –ó–∞–ø—É—Å–∫–∞–µ–º Prefect flow –¥–ª—è batch –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...[/yellow]")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Prefect flow –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è batch
        result = await batch_run_flow(
            batch_name=batch_name,
            agent_type=agent_type,
            force_restart=force_restart,
            max_concurrent=max_concurrent,
        )
        
        if result.get("status") == "COMPLETED":
            console.print(f"\n[bold green]üéâ Batch '{batch_name}' –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ Prefect![/bold green]")
            console.print(f"[green]‚úÖ –£—Å–ø–µ—à–Ω–æ:[/green] {result['successful_queries']}/{result['executed_queries']}")
            if result['failed_queries'] > 0:
                console.print(f"[red]‚ùå –û—à–∏–±–æ–∫:[/red] {result['failed_queries']}")
            if result['skipped_queries'] > 0:
                console.print(f"[yellow]‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ:[/green] {result['skipped_queries']}")
            console.print(f"[green]üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤:[/green] {result['batch_dir']}")
        else:
            console.print(f"[red]‚ùå Batch –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {result.get('error', 'Unknown error')}[/red]")
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è batch —á–µ—Ä–µ–∑ Prefect:[/red] {e}")
        import traceback
        console.print(f"[red]Traceback:[/red]\n{traceback.format_exc()}")


async def run_batch(
    batch_name: str,
    agent_type: str = DEFAULT_AGENT,
    force_restart: bool = False,
) -> None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç batch-–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ."""
    batch_dir = Path("batches") / batch_name
    
    if not batch_dir.exists():
        console.print(f"[red]‚ùå Batch '{batch_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤:[/red] {batch_dir}")
        return
    
    plan_file = batch_dir / "plan.json"
    status_file = batch_dir / "status.txt"
    
    if not plan_file.exists():
        console.print(f"[red]‚ùå –§–∞–π–ª –ø–ª–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω:[/red] {plan_file}")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞–Ω
    try:
        with open(plan_file, "r", encoding="utf-8") as f:
            plan_data = json.load(f)
        
        from sgr_deep_research.core.agents.batch_generator_agent import BatchPlan
        batch_plan = BatchPlan(**plan_data)
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–Ω–∞:[/red] {e}")
        return
    
    console.print(f"[bold cyan]üöÄ –ó–∞–ø—É—Å–∫ batch –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è '{batch_name}'[/bold cyan]")
    console.print(f"[cyan]–¢–µ–º–∞:[/cyan] {batch_plan.topic}")
    console.print(f"[cyan]–ó–∞–ø—Ä–æ—Å–æ–≤:[/cyan] {len(batch_plan.queries)}")
    console.print(f"[cyan]–ê–≥–µ–Ω—Ç:[/cyan] {agent_type}")
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    completed_queries = set()
    if status_file.exists() and not force_restart:
        with open(status_file, "r", encoding="utf-8") as f:
            for line in f:
                if line.startswith("[COMPLETED]"):
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–ø—Ä–æ—Å–∞
                    match = re.search(r"\[COMPLETED\]\s+(\d+)\.", line)
                    if match:
                        completed_queries.add(int(match.group(1)))
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    queries_to_run = [q for q in batch_plan.queries if q.id not in completed_queries]
    
    if not queries_to_run:
        console.print("[green]‚úÖ –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã![/green]")
        return
    
    console.print(f"[yellow]üìã –ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é: {len(queries_to_run)} –∏–∑ {len(batch_plan.queries)} –∑–∞–ø—Ä–æ—Å–æ–≤[/yellow]")
    
    if not force_restart and len(completed_queries) > 0:
        console.print(f"[dim]–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {len(completed_queries)} —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤[/dim]")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã
    with Progress(
        TextColumn("[progress.description]{task.description}"),
        BarColumn(),
        "[progress.percentage]{task.percentage:>3.1f}%",
        "‚Ä¢",
        TimeRemainingColumn(),
        console=console,
    ) as progress:
        
        task = progress.add_task(f"Batch {batch_name}", total=len(queries_to_run))
        
        for query in queries_to_run:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ RUNNING
            update_query_status(status_file, query.id, "RUNNING")
            
            progress.update(task, description=f"[cyan]–ó–∞–ø—Ä–æ—Å {query.id:02d}:[/cyan] {query.aspect}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            query_dir = batch_dir / f"query_{query.id:02d}_{query.aspect.replace(' ', '_')}"
            query_dir.mkdir(exist_ok=True)
            
            output_file = query_dir / "result.md"
            
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
                result = await run_agent(
                    agent_type=agent_type,
                    query=query.query,
                    output_file=str(output_file),
                    deep_level=query.suggested_depth,
                )
                
                if result:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                    meta_file = query_dir / "metadata.json"
                    with open(meta_file, "w", encoding="utf-8") as f:
                        json.dump({
                            "id": query.id,
                            "query": query.query,
                            "query_en": query.query_en,
                            "aspect": query.aspect,
                            "scope": query.scope,
                            "suggested_depth": query.suggested_depth,
                            "agent_type": agent_type,
                            "completed_at": datetime.now().isoformat(),
                            "status": "COMPLETED",
                        }, f, ensure_ascii=False, indent=2)
                    
                    update_query_status(status_file, query.id, "COMPLETED")
                    console.print(f"[green]‚úÖ –ó–∞–ø—Ä–æ—Å {query.id} –∑–∞–≤–µ—Ä—à–µ–Ω[/green]")
                else:
                    update_query_status(status_file, query.id, "ERROR")
                    console.print(f"[red]‚ùå –ó–∞–ø—Ä–æ—Å {query.id} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π[/red]")
                
            except Exception as e:
                console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ {query.id}:[/red] {e}")
                update_query_status(status_file, query.id, "ERROR")
            
            progress.advance(task)
    
    console.print(f"\n[bold green]üéâ Batch –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ '{batch_name}' –∑–∞–≤–µ—Ä—à–µ–Ω–æ![/bold green]")
    console.print(f"[green]üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤:[/green] {batch_dir}")


def update_query_status(status_file: Path, query_id: int, new_status: str) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ñ–∞–π–ª–µ."""
    if not status_file.exists():
        return
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open(status_file, "r", encoding="utf-8") as f:
        lines = f.readlines()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω—ã–º ID
    for i, line in enumerate(lines):
        if re.search(rf"\[.*\]\s+{query_id:02d}\.", line):
            # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
            lines[i] = re.sub(r"\[.*?\]", f"[{new_status}]", line)
            break
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    with open(status_file, "w", encoding="utf-8") as f:
        f.writelines(lines)


def list_batches() -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö batch-–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π."""
    batches_dir = Path("batches")
    
    if not batches_dir.exists():
        console.print("[yellow]üìÅ –ü–∞–ø–∫–∞ batches –Ω–µ –Ω–∞–π–¥–µ–Ω–∞[/yellow]")
        return
    
    batch_dirs = [d for d in batches_dir.iterdir() if d.is_dir()]
    
    if not batch_dirs:
        console.print("[yellow]üìÅ Batch-–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã[/yellow]")
        return
    
    console.print(f"[bold cyan]üìã –ù–∞–π–¥–µ–Ω–æ {len(batch_dirs)} batch-–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π:[/bold cyan]\n")
    
    for batch_dir in sorted(batch_dirs):
        batch_name = batch_dir.name
        plan_file = batch_dir / "plan.txt"
        meta_file = batch_dir / "metadata.json"
        
        # –ß–∏—Ç–∞–µ–º —Ç–µ–º—É –∏ –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        topic = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞"
        total_queries = 0
        
        if meta_file.exists():
            try:
                with open(meta_file, "r", encoding="utf-8") as f:
                    meta = json.load(f)
                    topic = meta.get("topic", topic)
                    total_queries = meta.get("total_queries", 0)
            except:
                pass
        elif plan_file.exists():
            # Fallback: —Å—á–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –ø–ª–∞–Ω–µ
            try:
                with open(plan_file, "r", encoding="utf-8") as f:
                    for line in f:
                        if line.strip() and not line.strip().startswith("#"):
                            total_queries += 1
                        elif line.strip().startswith("# Topic:"):
                            topic = line.strip()[8:].strip()
            except:
                pass
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        completed_queries = 0
        error_queries = 0
        
        for i in range(1, total_queries + 1):
            result_dir = batch_dir / f"{i:02d}_result"
            exec_file = result_dir / "execution.json"
            
            if exec_file.exists():
                try:
                    with open(exec_file, "r", encoding="utf-8") as f:
                        exec_data = json.load(f)
                        if exec_data.get("status") == "COMPLETED":
                            completed_queries += 1
                        else:
                            error_queries += 1
                except:
                    error_queries += 1
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        if completed_queries == total_queries and total_queries > 0:
            status_color = "green"
            status_text = "‚úÖ –ó–ê–í–ï–†–®–ï–ù"
        elif completed_queries > 0:
            status_color = "yellow"
            status_text = "üîÑ –ß–ê–°–¢–ò–ß–ù–û"
        elif error_queries > 0:
            status_color = "red"
            status_text = "‚ùå –û–®–ò–ë–ö–ò"
        else:
            status_color = "blue"
            status_text = "‚è≥ –û–ñ–ò–î–ê–ï–¢"
        
        console.print(f"[bold]{batch_name}[/bold]")
        console.print(f"  [dim]–¢–µ–º–∞:[/dim] {topic}")
        console.print(f"  [{status_color}]–°—Ç–∞—Ç—É—Å:[/{status_color}] {status_text}")
        console.print(f"  [dim]–ü—Ä–æ–≥—Ä–µ—Å—Å:[/dim] {completed_queries}/{total_queries}")
        if error_queries > 0:
            console.print(f"  [red]–û—à–∏–±–æ–∫:[/red] {error_queries}")
        console.print()


def show_batch_status(batch_name: str) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å batch –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è."""
    batch_dir = Path("batches") / batch_name
    
    if not batch_dir.exists():
        console.print(f"[red]‚ùå Batch '{batch_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤:[/red] {batch_dir}")
        return
    
    plan_file = batch_dir / "plan.txt"
    meta_file = batch_dir / "metadata.json"
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞–Ω
    queries = []
    topic = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞"
    
    if plan_file.exists():
        with open(plan_file, "r", encoding="utf-8") as f:
            actual_line_num = 0
            for line_num, line in enumerate(f, 1):
                line = line.strip()
                if line and not line.startswith("#"):
                    actual_line_num += 1
                    queries.append((actual_line_num, line))
                elif line.startswith("# Topic:"):
                    topic = line[8:].strip()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    queries_meta = {}
    if meta_file.exists():
        try:
            with open(meta_file, "r", encoding="utf-8") as f:
                meta = json.load(f)
                topic = meta.get("topic", topic)
                for qmeta in meta.get("queries_meta", []):
                    queries_meta[qmeta["line"]] = qmeta
        except Exception as e:
            console.print(f"[yellow]‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {e}[/yellow]")
    
    if not queries:
        console.print("[red]‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–ø—Ä–æ—Å—ã –≤ –ø–ª–∞–Ω–µ[/red]")
        return
    
    console.print(f"[bold cyan]üìã Batch –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: {batch_name}[/bold cyan]")
    console.print(f"[cyan]–¢–µ–º–∞:[/cyan] {topic}")
    console.print(f"[cyan]–ó–∞–ø—Ä–æ—Å–æ–≤:[/cyan] {len(queries)}")
    console.print(f"\n[bold yellow]üìä –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:[/bold yellow]")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    for line_num, query in queries:
        result_dir = batch_dir / f"{line_num:02d}_result"
        exec_file = result_dir / "execution.json"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if exec_file.exists():
            try:
                with open(exec_file, "r", encoding="utf-8") as f:
                    exec_data = json.load(f)
                    status = exec_data.get("status", "UNKNOWN")
                    completed_at = exec_data.get("completed_at", "")
                    
                if status == "COMPLETED":
                    status_color = "green"
                    status_icon = "‚úÖ"
                    status_text = f"COMPLETED ({completed_at[:16]})"
                else:
                    status_color = "red"
                    status_icon = "‚ùå"
                    status_text = "ERROR"
            except:
                status_color = "red"
                status_icon = "‚ùå"
                status_text = "ERROR (–∫–æ—Ä—Ä. —Ñ–∞–π–ª)"
        else:
            status_color = "dim"
            status_icon = "‚è≥"
            status_text = "PENDING"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        console.print(f"  [{status_color}]{status_icon} {line_num:02d}.[/{status_color}] {status_text}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        short_query = query[:80] + "..." if len(query) > 80 else query
        console.print(f"      [dim]{short_query}[/dim]")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if line_num in queries_meta:
            qmeta = queries_meta[line_num]
            console.print(f"      [dim]–ê—Å–ø–µ–∫—Ç: {qmeta.get('aspect', 'N/A')}, "
                         f"–ì–ª—É–±–∏–Ω–∞: {qmeta.get('suggested_depth', 0)}[/dim]")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –µ—Å–ª–∏ –µ—Å—Ç—å
        if exec_file.exists():
            report_file = result_dir / "report.md"
            if report_file.exists():
                console.print(f"      [dim]–û—Ç—á–µ—Ç: {report_file}[/dim]")
        
        console.print()


async def interactive_mode():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã."""
    console.print("[bold cyan]üîç SGR Deep Research - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º[/bold cyan]")
    console.print("–í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏, 'quit' –¥–ª—è –≤—ã—Ö–æ–¥–∞\n")
    
    current_agent = DEFAULT_AGENT  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    while True:
        try:
            command = Prompt.ask(f"[{current_agent}]", default="").strip()
            
            if not command or command.lower() in ["quit", "exit", "q"]:
                console.print("[yellow]–î–æ —Å–≤–∏–¥–∞–Ω–∏—è![/yellow]")
                break
            
            if command.lower() == "help":
                console.print("\n[bold cyan]–ö–æ–º–∞–Ω–¥—ã:[/bold cyan]")
                console.print("  help                    - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
                console.print("  agents                  - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤")
                console.print("  agent <type>            - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –∞–≥–µ–Ω—Ç–∞")
                console.print("  deep <–∑–∞–ø—Ä–æ—Å>           - –ì–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ (20 —à–∞–≥–æ–≤)")
                console.print("  deep2 <–∑–∞–ø—Ä–æ—Å>          - –û—á–µ–Ω—å –≥–ª—É–±–æ–∫–æ–µ (40 —à–∞–≥–æ–≤, ~20-60 –º–∏–Ω)")
                console.print("  deep3 <–∑–∞–ø—Ä–æ—Å>          - –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –≥–ª—É–±–æ–∫–æ–µ (60 —à–∞–≥–æ–≤, ~30-90 –º–∏–Ω)")
                console.print("  [bold yellow]Batch —Ä–µ–∂–∏–º:[/bold yellow]")
                console.print("  batches                 - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ batch-–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π")
                console.print("  batch create <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <—Ç–µ–º–∞> - –°–æ–∑–¥–∞—Ç—å batch –ø–ª–∞–Ω")
                console.print("  batch run <–Ω–∞–∑–≤–∞–Ω–∏–µ>    - –ó–∞–ø—É—Å—Ç–∏—Ç—å batch –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ")
                console.print("  batch status <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å batch")
                console.print("  quit/exit/q             - –í—ã—Ö–æ–¥")
                console.print("  <–∑–∞–ø—Ä–æ—Å>                - –í—ã–ø–æ–ª–Ω–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ")
                console.print()
                continue
            
            if command.lower() == "agents":
                display_agents()
                continue
            
            if command.lower().startswith("agent "):
                new_agent = command[6:].strip()
                if new_agent in AGENTS:
                    current_agent = new_agent
                    console.print(f"[green]–ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –∞–≥–µ–Ω—Ç–∞:[/green] {new_agent}")
                else:
                    console.print(f"[red]–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≥–µ–Ω—Ç:[/red] {new_agent}")
                    display_agents()
                continue
            
            # Batch –∫–æ–º–∞–Ω–¥—ã
            if command.lower() == "batches":
                list_batches()
                continue
            
            if command.lower().startswith("batch "):
                batch_args = command[6:].split()
                
                if len(batch_args) == 0:
                    console.print("[red]–£–∫–∞–∂–∏—Ç–µ –ø–æ–¥–∫–æ–º–∞–Ω–¥—É:[/red] create, run, status")
                    continue
                
                batch_cmd = batch_args[0].lower()
                
                if batch_cmd == "create":
                    if len(batch_args) < 4:
                        console.print("[red]–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:[/red] batch create <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <—Ç–µ–º–∞>")
                        console.print("[yellow]–ü—Ä–∏–º–µ—Ä:[/yellow] batch create bashkir_history 10 –∏—Å—Ç–æ—Ä–∏—è –±–∞—à–∫–∏—Ä")
                        continue
                    
                    batch_name = batch_args[1]
                    try:
                        count = int(batch_args[2])
                    except ValueError:
                        console.print("[red]–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º[/red]")
                        continue
                    
                    topic = " ".join(batch_args[3:])
                    
                    await create_batch_plan(topic, batch_name, count)
                    continue
                
                elif batch_cmd == "run":
                    if len(batch_args) < 2:
                        console.print("[red]–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:[/red] batch run <–Ω–∞–∑–≤–∞–Ω–∏–µ> [parallel|sequential]")
                        continue
                    
                    batch_name = batch_args[1]
                    run_mode = batch_args[2] if len(batch_args) > 2 else "parallel"
                    
                    if run_mode == "parallel":
                        await run_batch_parallel(batch_name, current_agent, max_concurrent=3)
                    else:
                        await run_batch(batch_name, current_agent)
                    continue
                
                elif batch_cmd == "status":
                    if len(batch_args) < 2:
                        console.print("[red]–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:[/red] batch status <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
                        continue
                    
                    batch_name = batch_args[1]
                    show_batch_status(batch_name)
                    continue
                
                else:
                    console.print(f"[red]–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è batch –∫–æ–º–∞–Ω–¥–∞:[/red] {batch_cmd}")
                    console.print("[yellow]–î–æ—Å—Ç—É–ø–Ω—ã–µ:[/yellow] create, run, status")
                    continue
            
            # –í—ã–ø–æ–ª–Ω–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
            deep_level = 0
            if command.startswith("deep"):
                if command.startswith("deep "):
                    deep_level = 1
                    command = command[5:]  # –£–±—Ä–∞—Ç—å "deep " –∏–∑ –Ω–∞—á–∞–ª–∞
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω deep1, deep2, deep3 –∏ —Ç.–¥.
                    import re
                    match = re.match(r"deep(\d+)\s+(.+)", command)
                    if match:
                        deep_level = int(match.group(1))
                        command = match.group(2)
                    else:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç–æ deep1, deep2 –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞
                        match = re.match(r"deep(\d+)$", command.split()[0])
                        if match and len(command.split()) > 1:
                            deep_level = int(match.group(1))
                            command = " ".join(command.split()[1:])
                
                if deep_level > 0:
                    console.print(f"[yellow]üîç –ì–ª—É–±–æ–∫–∏–π —Ä–µ–∂–∏–º —É—Ä–æ–≤–Ω—è {deep_level} (–≤—Ä–µ–º—è: ~{deep_level * 10}-{deep_level * 30} –º–∏–Ω)[/yellow]")
            
            await run_agent_with_prefect(current_agent, command, deep_level=deep_level)
            console.print()
            
        except KeyboardInterrupt:
            console.print("\n[yellow]–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/yellow]")
            break
        except Exception as e:
            console.print(f"\n[red]–û—à–∏–±–∫–∞:[/red] {e}")


@click.group(invoke_without_command=True)
@click.option('--query', '-q', help='–ó–∞–ø—Ä–æ—Å –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è')
@click.option('--agent', '-a', 
              type=click.Choice(list(AGENTS.keys())), 
              default='sgr-tools',
              help='–¢–∏–ø –∞–≥–µ–Ω—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: sgr-tools)')
@click.option('--output', '-o', help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (Markdown)')
@click.option('--deep', type=int, default=0, 
              help='–£—Ä–æ–≤–µ–Ω—å –≥–ª—É–±–æ–∫–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è (1-5+: 1=20 —à–∞–≥–æ–≤, 2=40 —à–∞–≥–æ–≤, 3=60 —à–∞–≥–æ–≤...)')
@click.option('--system-prompt', 'system_prompt', type=str, default=None,
              help='–ò–º—è –ø—Ä–µ—Å–µ—Ç–∞ –∏–∑ config.prompts.available_prompts –∏–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –ø–∞–ø–∫–∏ prompts')
@click.option('--debug', is_flag=True, help='–í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥')
@click.option('--interactive', '-i', is_flag=True, help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ')
@click.pass_context
def cli(ctx, query, agent, output, deep, system_prompt, debug, interactive):
    """SGR Deep Research CLI
    
    –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    
      # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
      uv run python -m sgr_deep_research.cli
    
      # –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—Ä–æ—Å
      uv run python -m sgr_deep_research.cli --query "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–≤–∞–Ω—Ç–æ–≤—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã?"
    
      # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
      uv run python -m sgr_deep_research.cli --agent sgr-tools --query "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ AI"
    
      # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ñ–∞–π–ª
      uv run python -m sgr_deep_research.cli --query "Python async/await" --output report.md
    """
    setup_logging(debug)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = get_config()
        console.print(f"[dim]–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {config.tavily.api_base_url}[/dim]")
    except Exception as e:
        console.print(f"[red]–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:[/red] {e}")
        sys.exit(1)
    
    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –≤—ã–∑–≤–∞–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É
    if ctx.invoked_subcommand is None:
        if interactive or not query:
            asyncio.run(interactive_mode())
        else:
            # –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ Prefect
            asyncio.run(run_agent_with_prefect(agent, query, deep, output))


@cli.command()
def agents():
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤."""
    display_agents()


@cli.command()
@click.argument('query')
@click.option('--level', '-l', type=int, default=1, help='–£—Ä–æ–≤–µ–Ω—å –≥–ª—É–±–∏–Ω—ã (1-5+)')
@click.option('--agent', '-a', 
              type=click.Choice(list(AGENTS.keys())), 
              default='sgr-tools',
              help='–¢–∏–ø –∞–≥–µ–Ω—Ç–∞')
@click.option('--output', '-o', help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
@click.option('--system-prompt', 'system_prompt', type=str, default=None,
              help='–ò–º—è –ø—Ä–µ—Å–µ—Ç–∞ –∏–∑ config.prompts.available_prompts –∏–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –ø–∞–ø–∫–∏ prompts')
def deep(query, level, agent, output, system_prompt):
    """–ì–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º."""
    asyncio.run(run_agent_with_prefect(agent, query, level, output))


@cli.command()
@click.argument('query')
@click.option('--agent', '-a', 
              type=click.Choice(list(AGENTS.keys())), 
              default='sgr-tools',
              help='–¢–∏–ø –∞–≥–µ–Ω—Ç–∞')
@click.option('--output', '-o', help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
@click.option('--system-prompt', 'system_prompt', type=str, default=None,
              help='–ò–º—è –ø—Ä–µ—Å–µ—Ç–∞ –∏–∑ config.prompts.available_prompts –∏–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –ø–∞–ø–∫–∏ prompts')
def deep1(query, agent, output, system_prompt):
    """–ì–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è 1 (20 —à–∞–≥–æ–≤, ~10-30 –º–∏–Ω)."""
    asyncio.run(run_agent_with_prefect(agent, query, 1, output))


@cli.command()
@click.argument('query')
@click.option('--agent', '-a', 
              type=click.Choice(list(AGENTS.keys())), 
              default='sgr-tools',
              help='–¢–∏–ø –∞–≥–µ–Ω—Ç–∞')
@click.option('--output', '-o', help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
@click.option('--system-prompt', 'system_prompt', type=str, default=None,
              help='–ò–º—è –ø—Ä–µ—Å–µ—Ç–∞ –∏–∑ config.prompts.available_prompts –∏–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –ø–∞–ø–∫–∏ prompts')
def deep2(query, agent, output, system_prompt):
    """–û—á–µ–Ω—å –≥–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è 2 (40 —à–∞–≥–æ–≤, ~20-60 –º–∏–Ω)."""
    asyncio.run(run_agent_with_prefect(agent, query, 2, output))


@cli.command()
@click.argument('query')
@click.option('--agent', '-a', 
              type=click.Choice(list(AGENTS.keys())), 
              default='sgr-tools',
              help='–¢–∏–ø –∞–≥–µ–Ω—Ç–∞')
@click.option('--output', '-o', help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
@click.option('--system-prompt', 'system_prompt', type=str, default=None,
              help='–ò–º—è –ø—Ä–µ—Å–µ—Ç–∞ –∏–∑ config.prompts.available_prompts –∏–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –ø–∞–ø–∫–∏ prompts')
def deep3(query, agent, output, system_prompt):
    """–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –≥–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è 3 (60 —à–∞–≥–æ–≤, ~30-90 –º–∏–Ω)."""
    asyncio.run(run_agent_with_prefect(agent, query, 3, output))


@cli.group()
def batch():
    """Batch –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è - –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ."""
    pass


@batch.command('create')
@click.argument('batch_name')
@click.argument('count', type=int)
@click.argument('topic')
@click.option('--languages', '-l', multiple=True, default=['ru', 'en'], 
              help='–Ø–∑—ã–∫–∏ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ru, en)')
def batch_create(batch_name, count, topic, languages):
    """–°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω batch-–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.
    
    –ü—Ä–∏–º–µ—Ä: uv run python -m sgr_deep_research.cli batch create bashkir_history 10 "–∏—Å—Ç–æ—Ä–∏—è –±–∞—à–∫–∏—Ä"
    """
    asyncio.run(create_batch_plan(topic, batch_name, count, list(languages)))


@batch.command('run')
@click.argument('batch_name')
@click.option('--agent', '-a', 
              type=click.Choice(list(AGENTS.keys())), 
              default='tools',  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é tools –∞–≥–µ–Ω—Ç - –æ–Ω —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ
              help='–¢–∏–ø –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
@click.option('--restart', is_flag=True, help='–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –ø—Ä–æ–≥—Ä–µ—Å—Å')
@click.option('--parallel/--sequential', default=True, help='–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –∏–ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ')
@click.option('--max-concurrent', '-c', default=2, help='–ú–∞–∫—Å–∏–º—É–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á')
@click.option('--clarifications/--no-clarifications', default=False, help='–ó–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–≤—Ç–æ–Ω–æ–º–Ω–æ)')
def batch_run(batch_name, agent, restart, parallel, max_concurrent, clarifications):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å batch-–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ.
    
    –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):
        uv run python -m sgr_deep_research.cli batch run bashkir_history
    
    –° –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:
        uv run python -m sgr_deep_research.cli batch run bashkir_history --restart --clarifications
    """
    if parallel:
        asyncio.run(run_batch_parallel(batch_name, agent, max_concurrent, restart, not clarifications))
    else:
        asyncio.run(run_batch(batch_name, agent, restart, not clarifications))


@batch.command('list')
def batch_list():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö batch-–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π."""
    list_batches()


@batch.command('status')
@click.argument('batch_name')
def batch_status(batch_name):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å batch-–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è."""
    show_batch_status(batch_name)


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ CLI."""
    cli()


if __name__ == "__main__":
    main()
