"""Prefect flow for individual research operations."""

import json
import logging
from datetime import datetime
from pathlib import Path
from typing import Optional, Dict, Any

from prefect import flow, task
from prefect.artifacts import create_markdown_artifact

from sgr_deep_research.core.agents.sgr_tools_agent import SGRToolCallingResearchAgent
from sgr_deep_research.core.models import AgentStatesEnum

import logging

logger = logging.getLogger("prefect")


async def run_research_agent_task(
    query: str,
    deep_level: int = 0,
    result_dir: Optional[str] = None,
    no_clarifications: bool = False,
) -> Dict[str, Any]:
    """Task –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."""

    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞: {query}")

    base_steps = 5
    base_searches = 3

    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
    agent = SGRToolCallingResearchAgent(
        task=query,
        max_iterations=base_steps * (deep_level * 3 + 1),
        max_searches=base_searches * (deep_level + 1),
        use_streaming=False,
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º deep_level –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –º–æ–¥–µ–ª–∏
    if deep_level > 0:
        agent._deep_level = deep_level

    # –í—Ä–µ–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è result_dir –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
    original_reports_dir = None
    if result_dir:
        from sgr_deep_research.settings import get_config

        config = get_config()
        original_reports_dir = config.execution.reports_dir
        config.execution.reports_dir = result_dir

        # –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞
        logger.info(f"‚ñ∂Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞...")

        # –ï—Å–ª–∏ no_clarifications=True, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º —É—Ç–æ—á–Ω–µ–Ω–∏—è
        if no_clarifications:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —á—Ç–æ —É—Ç–æ—á–Ω–µ–Ω–∏—è –Ω–µ –Ω—É–∂–Ω—ã (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –ø–æ–ª–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            try:
                agent._context.disable_clarifications = True
                logger.info(f"üö´ –†–µ–∂–∏–º –±–µ–∑ —É—Ç–æ—á–Ω–µ–Ω–∏–π - –∞–≥–µ–Ω—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∏–º–µ—é—â–µ–π—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π")
            except (ValueError, AttributeError):
                logger.info(f"üö´ –†–µ–∂–∏–º –±–µ–∑ —É—Ç–æ—á–Ω–µ–Ω–∏–π (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –ø–æ–ª–µ disable_clarifications –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)")

        await agent.execute()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ - —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞ –µ—Å–ª–∏ –∞–≥–µ–Ω—Ç –µ–≥–æ —Å–æ–∑–¥–∞–ª
        final_answer = ""
        
        if hasattr(agent._context, 'last_report_path') and agent._context.last_report_path:
            try:
                with open(agent._context.last_report_path, "r", encoding="utf-8") as f:
                    final_answer = f.read()
                logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω –æ—Ç—á–µ—Ç: {Path(agent._context.last_report_path).name}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç—á–µ—Ç: {e}")

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        sources = list(agent._context.sources.values())
        stats = agent.metrics.format_stats()

        # –°–æ–∑–¥–∞–µ–º Prefect artifact —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        try:
            create_markdown_artifact(
                key=f"research-result-{datetime.now().strftime('%Y%m%d-%H%M%S')}",
                markdown=final_answer or "–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                description=f"–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: {query[:50]}..."
            )
            logger.info(f"üìä –°–æ–∑–¥–∞–Ω Prefect artifact")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Prefect artifact: {e}")

        logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

        return {
            "status": "COMPLETED",
            "answer": final_answer,
            "sources": [{"number": s.number, "url": s.url, "title": s.title} for s in sources],
            "stats": stats,
            "model": agent.model_name,
            "deep_level": deep_level,
        }


@flow(name="research-flow")
async def research_flow(
    query: str,
    deep_level: int = 0,
    output_file: Optional[str] = None,
    result_dir: Optional[str] = None,
    clarifications: bool = False,
    no_clarifications: bool = False,
) -> Dict[str, Any]:
    """Prefect flow –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è."""

    logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ research flow –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}")

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
    result = await run_research_agent_task(
        query=query,
        deep_level=deep_level,
        result_dir=result_dir,
        no_clarifications=no_clarifications,
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if output_file and result.get("status") == "COMPLETED":
        output_path = Path(output_file)
        output_path.parent.mkdir(parents=True, exist_ok=True)

        with open(output_path, "w", encoding="utf-8") as f:
            f.write(f"# –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è\n\n")
            f.write(f"**–ó–∞–ø—Ä–æ—Å:** {query}\n\n")
            f.write(f"**–ê–≥–µ–Ω—Ç:** {result.get('agent_type', 'Unknown')}\n\n")
            f.write(f"**–ú–æ–¥–µ–ª—å:** {result.get('model', 'Unknown')}\n\n")
            if deep_level > 0:
                f.write(f"**–ì–ª—É–±–∏–Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:** {deep_level}\n\n")
            f.write("## –û—Ç–≤–µ—Ç\n\n")
            f.write(result.get("answer", ""))

            sources = result.get("sources", [])
            if sources:
                f.write("\n\n## –ò—Å—Ç–æ—á–Ω–∏–∫–∏\n\n")
                for source in sources:
                    f.write(f"{source['number']}. [{source['title'] or '–ò—Å—Ç–æ—á–Ω–∏–∫'}]({source['url']})\n")

        logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_path}")

    return result


if __name__ == "__main__":
    import asyncio

    async def main():
        """Simple main function to run research on Bashkir history."""
        query = "–ò—Å—Ç–æ—Ä–∏—è –±–∞—à–∫–∏—Ä: –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ, –∫—É–ª—å—Ç—É—Ä–∞, —Ç—Ä–∞–¥–∏—Ü–∏–∏, –≤–∞–∂–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è"

        result = await research_flow(
            query=query,
            deep_level=1,
            output_file="reports/bashkir_history_research.md",
            result_dir="reports",
        )

    # Run the research
    asyncio.run(main())
