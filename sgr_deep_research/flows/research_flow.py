"""Prefect flow for individual research operations."""

import json
import logging
from datetime import datetime
from pathlib import Path
from typing import Optional, Dict, Any

from prefect import flow, task

from sgr_deep_research.core.agents.sgr_tools_agent import SGRToolCallingResearchAgent
from sgr_deep_research.core.models import AgentStatesEnum

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")


@task(name="run-research-agent")
async def run_research_agent_task(
    query: str,
    deep_level: int = 0,
    result_dir: Optional[str] = None,
    clarifications: bool = False,
) -> Dict[str, Any]:
    """Task –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."""

    try:
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞: {query}")

        base_steps = 5
        base_searches = 3

        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        agent = SGRToolCallingResearchAgent(
            task=query,
            max_iterations=base_steps * (deep_level * 3 + 1),
            max_searches=base_searches * (deep_level + 1),
            use_streaming=False,
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º deep_level –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –º–æ–¥–µ–ª–∏
        if deep_level > 0:
            agent._deep_level = deep_level

        # –í—Ä–µ–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è result_dir –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
        original_reports_dir = None
        if result_dir:
            from sgr_deep_research.settings import get_config

            config = get_config()
            original_reports_dir = config.execution.reports_dir
            config.execution.reports_dir = result_dir

        try:
            # –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞
            logger.info(f"‚ñ∂Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞...")
            await agent.execute()

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
            if agent._context.state == AgentStatesEnum.COMPLETED:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                final_answer = ""

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—á–µ—Ç—ã –≤ –ø–∞–ø–∫–µ reports
                reports_dir = Path(result_dir or "reports")
                if reports_dir.exists():
                    report_files = list(reports_dir.glob("*.md"))
                    if report_files:
                        latest_report = max(report_files, key=lambda x: x.stat().st_mtime)
                        if (datetime.now().timestamp() - latest_report.stat().st_mtime) < 300:
                            try:
                                with open(latest_report, "r", encoding="utf-8") as f:
                                    final_answer = f.read()
                                logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω –æ—Ç—á–µ—Ç: {latest_report.name}")
                            except Exception as e:
                                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç—á–µ—Ç: {e}")

                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                sources = list(agent._context.sources.values())
                stats = agent.metrics.format_stats()

                logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

                return {
                    "status": "COMPLETED",
                    "answer": final_answer,
                    "sources": [{"number": s.number, "url": s.url, "title": s.title} for s in sources],
                    "stats": stats,
                    "model": agent.model_name,
                    "deep_level": deep_level,
                }
            else:
                logger.error(f"‚ùå –ê–≥–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º: {agent._context.state}")
                return {
                    "status": "ERROR",
                    "error": f"Agent finished with state: {agent._context.state}",
                    "stats": agent.metrics.format_stats(),
                }

        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            if original_reports_dir is not None:
                from sgr_deep_research.settings import get_config

                config = get_config()
                config.execution.reports_dir = original_reports_dir

    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback

        logger.error(f"üìú Traceback: {traceback.format_exc()}")
        return {
            "status": "ERROR",
            "error": str(e),
            "traceback": traceback.format_exc(),
        }


@flow(name="research-flow")
async def research_flow(
    query: str,
    deep_level: int = 0,
    output_file: Optional[str] = None,
    result_dir: Optional[str] = None,
    clarifications: bool = False,
) -> Dict[str, Any]:
    """Prefect flow –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è."""

    logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ research flow –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}")

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
    result = await run_research_agent_task(
        query=query,
        deep_level=deep_level,
        result_dir=result_dir,
        clarifications=clarifications,
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if output_file and result.get("status") == "COMPLETED":
        output_path = Path(output_file)
        output_path.parent.mkdir(parents=True, exist_ok=True)

        with open(output_path, "w", encoding="utf-8") as f:
            f.write(f"# –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è\n\n")
            f.write(f"**–ó–∞–ø—Ä–æ—Å:** {query}\n\n")
            f.write(f"**–ê–≥–µ–Ω—Ç:** {result.get('agent_type', 'Unknown')}\n\n")
            f.write(f"**–ú–æ–¥–µ–ª—å:** {result.get('model', 'Unknown')}\n\n")
            if deep_level > 0:
                f.write(f"**–ì–ª—É–±–∏–Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:** {deep_level}\n\n")
            f.write("## –û—Ç–≤–µ—Ç\n\n")
            f.write(result.get("answer", ""))

            sources = result.get("sources", [])
            if sources:
                f.write("\n\n## –ò—Å—Ç–æ—á–Ω–∏–∫–∏\n\n")
                for source in sources:
                    f.write(f"{source['number']}. [{source['title'] or '–ò—Å—Ç–æ—á–Ω–∏–∫'}]({source['url']})\n")

        logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_path}")

    return result


if __name__ == "__main__":
    import asyncio

    async def main():
        """Simple main function to run research on Bashkir history."""
        query = "–ò—Å—Ç–æ—Ä–∏—è –±–∞—à–∫–∏—Ä: –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ, –∫—É–ª—å—Ç—É—Ä–∞, —Ç—Ä–∞–¥–∏—Ü–∏–∏, –≤–∞–∂–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è"

        result = await research_flow(
            query=query,
            deep_level=1,
            output_file="bashkir_history_research.md",
            result_dir="reports",
        )

    # Run the research
    asyncio.run(main())
